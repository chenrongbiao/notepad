现在：将以下内容复制到源代码目录的 plugin/CMakeLists.txt 中。
     并在项目配置中启用该构建：framework-plugintemplate_ENABLE
     或在命令行中启用该构建：-Dframework-plugintemplate_ENABLE:BOOL=ON

注意：在以下 if 中，是对此目标的扩展构建，使用 if 是在确保项目中启用该构建时才进行构建。
     可以注意的是，在没有明确构建何种插件时，任何由 add_framework_plugin 添加的插件构建均不会起效。
     这样可以最大程度在默认情况下确保主程序的可构建性。

# 一个简单的 plugintemplate 插件
add_framework_plugin(framework-plugintemplate
    # 这里可以进行编写包含源代码的目录、文件路径、其它需要构建的资源路径
    #framework-plugins/plugintemplate
)
if(framework-plugintemplate_ENABLE)
    # 这里可以进行扩展构建，
    # find_package(Qt5Svg)
    # target_link_libraries(framework-plugintemplate Qt5::Svg)
endif(framework-plugintemplate_ENABLE)


引用：在对话框中如果使用引用的方式，引用型声明式构建，直接在存储位置开始部署你的插件构建
    那么它应该生成 plugin.cmake 直接提供外部引用并自动将以上内容自动填充
    另外，它的构建路径以 plugin.cmake 文件所在目录为起始点

    # 一个使用引用构建的 plugintemplate 插件
    include(path/to/plugin.cmake)



# 提供给其它插件项目引用的共享资源(如果其它插件想通过框架构建引用的话）
if(FRAMEWORK_WANT_INCLUDE)
    message("-- [PLUGIN EXPORT]: FRAMEWORK_WANT_INCLUDE?")
    set(FRAMEWORK_INCLUDE_EXPORTS      # 共享的引用目录
        ${CMAKE_CURRENT_LIST_DIR}/src
    )
    set(FRAMEWORK_SOURCES_EXPORTS      # 共享的资源文件
        # ${CMAKE_CURRENT_LIST_DIR}/src/config.h         # 通用的 qDebug 配置定义
        # ${CMAKE_CURRENT_LIST_DIR}/src/utils/qrcutil.*  # 简化读取 qrc 资源文件内容
    )
    set(FRAMEWORK_WITHGIT_EXPORTS      # 共享的引用构建资源
        # 1. 引用了公共存储库
        # https://gitee.com/ndd-community/framework-plugin-component-library
    )

    # 特殊构建 - 为引用资源的目标配置预期所需依赖的构建
        # FRAMEWORK_PLUGIN 引用本资源的框架目标变量
    # find_package(Qt5Svg)
    # target_link_libraries(${FRAMEWORK_PLUGIN} Qt5::Svg)

    return()
endif(FRAMEWORK_WANT_INCLUDE)

