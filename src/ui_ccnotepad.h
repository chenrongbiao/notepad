/********************************************************************************
** Form generated from reading UI file 'ccnotepad.ui'
**
** Created by: Qt User Interface Compiler version 5.15.3
**
** WARNING! All changes made in this file will be lost when recompiling UI file!
********************************************************************************/

#ifndef UI_CCNOTEPAD_H
#define UI_CCNOTEPAD_H

#include <QtCore/QVariant>
#include <QtGui/QIcon>
#include <QtWidgets/QAction>
#include <QtWidgets/QApplication>
#include <QtWidgets/QHBoxLayout>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QMenu>
#include <QtWidgets/QMenuBar>
#include <QtWidgets/QStatusBar>
#include <QtWidgets/QTabWidget>
#include <QtWidgets/QToolBar>
#include <QtWidgets/QWidget>

QT_BEGIN_NAMESPACE

class Ui_CCNotePad
{
public:
    QAction *actionNewFile;
    QAction *actionOpenFile;
    QAction *actionSave;
    QAction *actionSave_as;
    QAction *actionClose;
    QAction *actionExit;
    QAction *actionClose_All;
    QAction *actionundo;
    QAction *actionredo;
    QAction *actioncut;
    QAction *actioncopy;
    QAction *actionpaste;
    QAction *actionselect_All;
    QAction *actionconver_windows_CR_LF;
    QAction *actionconvert_Unix_LF;
    QAction *actionconvert_Mac_CR;
    QAction *actionFind;
    QAction *actionReplace;
    QAction *actionGoline;
    QAction *actionShowSpaces;
    QAction *actionshow_end_of_line;
    QAction *actionShowAll;
    QAction *actionencode_in_GBK;
    QAction *actionencode_in_uft8;
    QAction *actionencode_in_UTF8_BOM;
    QAction *actionencode_in_UCS_BE_BOM;
    QAction *actionencode_in_UCS_2_LE_BOM;
    QAction *actionconvert_to_GBK;
    QAction *actionconvert_to_UTF8;
    QAction *actionconvert_to_UTF8_BOM;
    QAction *actionconvert_to_UCS_2_BE_BOM;
    QAction *actionconvert_to_UCS_2_LE_BOM;
    QAction *actionbatch_convert;
    QAction *actionOptions;
    QAction *actionCC_Pad;
    QAction *actionFile_compare;
    QAction *actionDir_compare;
    QAction *actionR;
    QAction *actionXML;
    QAction *actionYAML;
    QAction *actionPhp;
    QAction *actionC;
    QAction *actionCPP;
    QAction *actionCShape;
    QAction *actionObjective_C;
    QAction *actionJava;
    QAction *actionRC;
    QAction *actionHTML;
    QAction *actionMakefile;
    QAction *actionPascal;
    QAction *actionBatch;
    QAction *actionini;
    QAction *actionNfo;
    QAction *actionASP;
    QAction *actionSql;
    QAction *actionVirsual_Basic;
    QAction *actionJavaScript;
    QAction *actionCss;
    QAction *actionPerl;
    QAction *actionPython;
    QAction *actionLua;
    QAction *actionTex;
    QAction *actionFortran;
    QAction *actionShell;
    QAction *actionActionScript;
    QAction *actionNSIS;
    QAction *actionTcl;
    QAction *actionLisp;
    QAction *actionScheme;
    QAction *actionAssembly;
    QAction *actionD;
    QAction *actionDiff;
    QAction *actionProperties_file;
    QAction *actionPostScript;
    QAction *actionRuby;
    QAction *actionSmalltalk;
    QAction *actionVHDL;
    QAction *actionAutoIt;
    QAction *actionCMake;
    QAction *actionPowerShell;
    QAction *actionJsp;
    QAction *actionCoffeeScript;
    QAction *actionBaanC;
    QAction *actionS_Record;
    QAction *actionTypeScript;
    QAction *actionVisual_Prolog;
    QAction *actionTxt2tags;
    QAction *actionRust;
    QAction *actionRegistry;
    QAction *actionREBOL;
    QAction *actionOScript;
    QAction *actionNncrontab;
    QAction *actionNim;
    QAction *actionMMIXAL;
    QAction *actionLaTex;
    QAction *actionForth;
    QAction *actionESCRIPT;
    QAction *actionErlang;
    QAction *actionCsound;
    QAction *actionFreeBasic;
    QAction *actionBlitzBasic;
    QAction *actionPureBasic;
    QAction *actionAviSynth;
    QAction *actionASN1;
    QAction *actionSwift;
    QAction *actionIntel_HEX;
    QAction *actionFortran77;
    QAction *actionEdifact;
    QAction *actionMarkDown;
    QAction *actionMarkDown_2;
    QAction *actionOctave;
    QAction *actionPo;
    QAction *actionPov;
    QAction *actionjson;
    QAction *actionD_2;
    QAction *actionAVS;
    QAction *actionbash;
    QAction *actionIDL;
    QAction *actionMatlab;
    QAction *actionSpice;
    QAction *actionVerilog;
    QAction *actionTxt;
    QAction *actiontest;
    QAction *actiontest_2;
    QAction *actionGo;
    QAction *actionSearch_Result;
    QAction *actionDonate;
    QAction *actionDefaultStyle;
    QAction *actionLightBlueStyle;
    QAction *actionThinBlue;
    QAction *actionRiceYellow;
    QAction *actionYellow;
    QAction *actionSilver;
    QAction *actionLavenderBlush;
    QAction *actionMistyRose;
    QAction *actionEnglish;
    QAction *actionChinese;
    QAction *actionRegister;
    QAction *actionLanguage_Format;
    QAction *actionOpen_In_Text;
    QAction *actionOpen_In_Bin;
    QAction *actionRemove_leading_blank;
    QAction *actionRemove_eding_blank;
    QAction *actionRemove_Head_End_Blank;
    QAction *actionColumn_Block_Editing;
    QAction *actionWrap;
    QAction *actionDefine_Language;
    QAction *actionUPPERCASE;
    QAction *actionlowercase;
    QAction *actionProper_Case;
    QAction *actionProper_Case_blend;
    QAction *actionSentence_case;
    QAction *actionSentence_case_blend;
    QAction *actionInvertCase;
    QAction *actionRandomCase;
    QAction *actionRemove_Empty_Lines;
    QAction *actionRemove_Empty_Lines_Cbc;
    QAction *actionUserDefine;
    QAction *actionColumn_Edit_Mode;
    QAction *actionTAB_to_Space;
    QAction *actionSpace_to_TAB_All;
    QAction *actionSpace_to_TAB_Leading;
    QAction *actionDuplicate_Current_Line;
    QAction *actionRemove_Duplicate_Lines;
    QAction *actionRemove_Consecutive_Duplicate_Lines;
    QAction *actionSplit_Lines;
    QAction *actionJoin_Lines;
    QAction *actionMove_Up_Current_Line;
    QAction *actionMove_Down_Current_Line;
    QAction *actionInsert_Blank_Line_Above_Current;
    QAction *actionInsert_Blank_Line_Below_Current;
    QAction *actionReverse_Line_Order;
    QAction *actionRandomize_Line_Order;
    QAction *actionSort_Lines_Lexicographically_Ascending;
    QAction *actionSort_Lines_Lex_Ascending_Ignoring_Case;
    QAction *actionSort_Lines_As_Integers_Ascending;
    QAction *actionSort_Lines_As_Decimals_Comma_Ascending;
    QAction *actionSort_Lines_As_Decimals_Dot_Ascending;
    QAction *actionSort_Lines_Lexicographically_Descending;
    QAction *actionSort_Lines_Lex_Descending_Ignoring_Case;
    QAction *actionSort_Lines_As_Integers_Descending;
    QAction *actionSort_Lines_As_Decimals_Comma_Descending;
    QAction *actionSort_Lines_As_Decimals_Dot_Descending;
    QAction *actionFind_In_Dir;
    QAction *actionFindNext;
    QAction *actionFindPrev;
    QAction *actionRed;
    QAction *actionYellow_2;
    QAction *actionBlue;
    QAction *actionBig5;
    QAction *actionToBig5;
    QAction *action24;
    QAction *action36;
    QAction *action48;
    QAction *actioninfo;
    QAction *action1;
    QAction *actionFormat_Xml;
    QAction *actionFormat_Json;
    QAction *actionDark;
    QAction *actionVb;
    QAction *color1;
    QAction *color2;
    QAction *color3;
    QAction *color4;
    QAction *color5;
    QAction *loopColor;
    QAction *actionClear_History;
    QAction *actionFileListView;
    QAction *actionShow_ToolBar;
    QAction *actionBatch_Find;
    QAction *actionShow_Web_Addr;
    QAction *actionLanguage_File_Suffix;
    QAction *actionShortcut_Key_Manager;
    QWidget *centralWidget;
    QHBoxLayout *horizontalLayout;
    QTabWidget *editTabWidget;
    QMenuBar *menuBar;
    QMenu *menuFile;
    QMenu *menuEdit;
    QMenu *menuformat_conversion;
    QMenu *menuBlank_CharOperate;
    QMenu *menuConvert_Case_to;
    QMenu *menuLine_Operations;
    QMenu *menuSearch;
    QMenu *menuBook_Mark;
    QMenu *menuMark_Color;
    QMenu *menuView;
    QMenu *menudisplay_symbols;
    QMenu *menuIcon_Size;
    QMenu *menuCode;
    QMenu *menuASNI;
    QMenu *menuConvert_to_Other;
    QMenu *menuLanguage;
    QMenu *menuP;
    QMenu *menuC;
    QMenu *menuJ;
    QMenu *menuR;
    QMenu *menuH;
    QMenu *menuM;
    QMenu *menuB;
    QMenu *menuI;
    QMenu *menuN;
    QMenu *menuA;
    QMenu *menuS;
    QMenu *menuV;
    QMenu *menuL;
    QMenu *menuT;
    QMenu *menuF;
    QMenu *menuD;
    QMenu *menuO;
    QMenu *menuE;
    QMenu *menuG;
    QMenu *menuSet;
    QMenu *menuLanguage_2;
    QMenu *menuAbout;
    QMenu *menuAbout_2;
    QMenu *menuTools;
    QToolBar *mainToolBar;
    QStatusBar *statusBar;

    void setupUi(QMainWindow *CCNotePad)
    {
        if (CCNotePad->objectName().isEmpty())
            CCNotePad->setObjectName(QString::fromUtf8("CCNotePad"));
        CCNotePad->resize(1458, 789);
        QFont font;
        font.setFamily(QString::fromUtf8("Microsoft YaHei"));
        font.setPointSize(12);
        CCNotePad->setFont(font);
        QIcon icon;
        icon.addFile(QString::fromUtf8(":/Resources/edit/global/ndd.ico"), QSize(), QIcon::Normal, QIcon::Off);
        CCNotePad->setWindowIcon(icon);
        actionNewFile = new QAction(CCNotePad);
        actionNewFile->setObjectName(QString::fromUtf8("actionNewFile"));
        actionNewFile->setShortcutContext(Qt::WindowShortcut);
        actionOpenFile = new QAction(CCNotePad);
        actionOpenFile->setObjectName(QString::fromUtf8("actionOpenFile"));
        actionSave = new QAction(CCNotePad);
        actionSave->setObjectName(QString::fromUtf8("actionSave"));
        actionSave_as = new QAction(CCNotePad);
        actionSave_as->setObjectName(QString::fromUtf8("actionSave_as"));
        actionClose = new QAction(CCNotePad);
        actionClose->setObjectName(QString::fromUtf8("actionClose"));
        actionExit = new QAction(CCNotePad);
        actionExit->setObjectName(QString::fromUtf8("actionExit"));
        actionClose_All = new QAction(CCNotePad);
        actionClose_All->setObjectName(QString::fromUtf8("actionClose_All"));
        actionundo = new QAction(CCNotePad);
        actionundo->setObjectName(QString::fromUtf8("actionundo"));
        actionredo = new QAction(CCNotePad);
        actionredo->setObjectName(QString::fromUtf8("actionredo"));
        actioncut = new QAction(CCNotePad);
        actioncut->setObjectName(QString::fromUtf8("actioncut"));
        actioncopy = new QAction(CCNotePad);
        actioncopy->setObjectName(QString::fromUtf8("actioncopy"));
        actionpaste = new QAction(CCNotePad);
        actionpaste->setObjectName(QString::fromUtf8("actionpaste"));
        actionselect_All = new QAction(CCNotePad);
        actionselect_All->setObjectName(QString::fromUtf8("actionselect_All"));
        actionconver_windows_CR_LF = new QAction(CCNotePad);
        actionconver_windows_CR_LF->setObjectName(QString::fromUtf8("actionconver_windows_CR_LF"));
        actionconver_windows_CR_LF->setCheckable(true);
        actionconvert_Unix_LF = new QAction(CCNotePad);
        actionconvert_Unix_LF->setObjectName(QString::fromUtf8("actionconvert_Unix_LF"));
        actionconvert_Unix_LF->setCheckable(true);
        actionconvert_Mac_CR = new QAction(CCNotePad);
        actionconvert_Mac_CR->setObjectName(QString::fromUtf8("actionconvert_Mac_CR"));
        actionconvert_Mac_CR->setCheckable(true);
        actionFind = new QAction(CCNotePad);
        actionFind->setObjectName(QString::fromUtf8("actionFind"));
        actionReplace = new QAction(CCNotePad);
        actionReplace->setObjectName(QString::fromUtf8("actionReplace"));
        actionGoline = new QAction(CCNotePad);
        actionGoline->setObjectName(QString::fromUtf8("actionGoline"));
        actionShowSpaces = new QAction(CCNotePad);
        actionShowSpaces->setObjectName(QString::fromUtf8("actionShowSpaces"));
        actionShowSpaces->setCheckable(true);
        actionshow_end_of_line = new QAction(CCNotePad);
        actionshow_end_of_line->setObjectName(QString::fromUtf8("actionshow_end_of_line"));
        actionshow_end_of_line->setCheckable(true);
        actionShowAll = new QAction(CCNotePad);
        actionShowAll->setObjectName(QString::fromUtf8("actionShowAll"));
        actionShowAll->setCheckable(true);
        actionencode_in_GBK = new QAction(CCNotePad);
        actionencode_in_GBK->setObjectName(QString::fromUtf8("actionencode_in_GBK"));
        actionencode_in_GBK->setCheckable(true);
        actionencode_in_uft8 = new QAction(CCNotePad);
        actionencode_in_uft8->setObjectName(QString::fromUtf8("actionencode_in_uft8"));
        actionencode_in_uft8->setCheckable(true);
        actionencode_in_UTF8_BOM = new QAction(CCNotePad);
        actionencode_in_UTF8_BOM->setObjectName(QString::fromUtf8("actionencode_in_UTF8_BOM"));
        actionencode_in_UTF8_BOM->setCheckable(true);
        actionencode_in_UCS_BE_BOM = new QAction(CCNotePad);
        actionencode_in_UCS_BE_BOM->setObjectName(QString::fromUtf8("actionencode_in_UCS_BE_BOM"));
        actionencode_in_UCS_BE_BOM->setCheckable(true);
        actionencode_in_UCS_2_LE_BOM = new QAction(CCNotePad);
        actionencode_in_UCS_2_LE_BOM->setObjectName(QString::fromUtf8("actionencode_in_UCS_2_LE_BOM"));
        actionencode_in_UCS_2_LE_BOM->setCheckable(true);
        actionconvert_to_GBK = new QAction(CCNotePad);
        actionconvert_to_GBK->setObjectName(QString::fromUtf8("actionconvert_to_GBK"));
        actionconvert_to_UTF8 = new QAction(CCNotePad);
        actionconvert_to_UTF8->setObjectName(QString::fromUtf8("actionconvert_to_UTF8"));
        actionconvert_to_UTF8_BOM = new QAction(CCNotePad);
        actionconvert_to_UTF8_BOM->setObjectName(QString::fromUtf8("actionconvert_to_UTF8_BOM"));
        actionconvert_to_UCS_2_BE_BOM = new QAction(CCNotePad);
        actionconvert_to_UCS_2_BE_BOM->setObjectName(QString::fromUtf8("actionconvert_to_UCS_2_BE_BOM"));
        actionconvert_to_UCS_2_LE_BOM = new QAction(CCNotePad);
        actionconvert_to_UCS_2_LE_BOM->setObjectName(QString::fromUtf8("actionconvert_to_UCS_2_LE_BOM"));
        actionbatch_convert = new QAction(CCNotePad);
        actionbatch_convert->setObjectName(QString::fromUtf8("actionbatch_convert"));
        actionOptions = new QAction(CCNotePad);
        actionOptions->setObjectName(QString::fromUtf8("actionOptions"));
        actionCC_Pad = new QAction(CCNotePad);
        actionCC_Pad->setObjectName(QString::fromUtf8("actionCC_Pad"));
        actionFile_compare = new QAction(CCNotePad);
        actionFile_compare->setObjectName(QString::fromUtf8("actionFile_compare"));
        actionDir_compare = new QAction(CCNotePad);
        actionDir_compare->setObjectName(QString::fromUtf8("actionDir_compare"));
        actionR = new QAction(CCNotePad);
        actionR->setObjectName(QString::fromUtf8("actionR"));
        actionXML = new QAction(CCNotePad);
        actionXML->setObjectName(QString::fromUtf8("actionXML"));
        actionXML->setCheckable(true);
        actionYAML = new QAction(CCNotePad);
        actionYAML->setObjectName(QString::fromUtf8("actionYAML"));
        actionYAML->setCheckable(true);
        actionPhp = new QAction(CCNotePad);
        actionPhp->setObjectName(QString::fromUtf8("actionPhp"));
        actionPhp->setCheckable(true);
        actionC = new QAction(CCNotePad);
        actionC->setObjectName(QString::fromUtf8("actionC"));
        actionC->setCheckable(true);
        actionCPP = new QAction(CCNotePad);
        actionCPP->setObjectName(QString::fromUtf8("actionCPP"));
        actionCPP->setCheckable(true);
        actionCShape = new QAction(CCNotePad);
        actionCShape->setObjectName(QString::fromUtf8("actionCShape"));
        actionCShape->setCheckable(true);
        actionObjective_C = new QAction(CCNotePad);
        actionObjective_C->setObjectName(QString::fromUtf8("actionObjective_C"));
        actionObjective_C->setCheckable(true);
        actionJava = new QAction(CCNotePad);
        actionJava->setObjectName(QString::fromUtf8("actionJava"));
        actionJava->setCheckable(true);
        actionRC = new QAction(CCNotePad);
        actionRC->setObjectName(QString::fromUtf8("actionRC"));
        actionRC->setCheckable(true);
        actionHTML = new QAction(CCNotePad);
        actionHTML->setObjectName(QString::fromUtf8("actionHTML"));
        actionHTML->setCheckable(true);
        actionMakefile = new QAction(CCNotePad);
        actionMakefile->setObjectName(QString::fromUtf8("actionMakefile"));
        actionMakefile->setCheckable(true);
        actionPascal = new QAction(CCNotePad);
        actionPascal->setObjectName(QString::fromUtf8("actionPascal"));
        actionPascal->setCheckable(true);
        actionBatch = new QAction(CCNotePad);
        actionBatch->setObjectName(QString::fromUtf8("actionBatch"));
        actionBatch->setCheckable(true);
        actionini = new QAction(CCNotePad);
        actionini->setObjectName(QString::fromUtf8("actionini"));
        actionini->setCheckable(true);
        actionNfo = new QAction(CCNotePad);
        actionNfo->setObjectName(QString::fromUtf8("actionNfo"));
        actionNfo->setCheckable(true);
        actionASP = new QAction(CCNotePad);
        actionASP->setObjectName(QString::fromUtf8("actionASP"));
        actionASP->setCheckable(true);
        actionSql = new QAction(CCNotePad);
        actionSql->setObjectName(QString::fromUtf8("actionSql"));
        actionSql->setCheckable(true);
        actionVirsual_Basic = new QAction(CCNotePad);
        actionVirsual_Basic->setObjectName(QString::fromUtf8("actionVirsual_Basic"));
        actionVirsual_Basic->setCheckable(true);
        actionJavaScript = new QAction(CCNotePad);
        actionJavaScript->setObjectName(QString::fromUtf8("actionJavaScript"));
        actionJavaScript->setCheckable(true);
        actionCss = new QAction(CCNotePad);
        actionCss->setObjectName(QString::fromUtf8("actionCss"));
        actionCss->setCheckable(true);
        actionPerl = new QAction(CCNotePad);
        actionPerl->setObjectName(QString::fromUtf8("actionPerl"));
        actionPerl->setCheckable(true);
        actionPython = new QAction(CCNotePad);
        actionPython->setObjectName(QString::fromUtf8("actionPython"));
        actionPython->setCheckable(true);
        actionLua = new QAction(CCNotePad);
        actionLua->setObjectName(QString::fromUtf8("actionLua"));
        actionLua->setCheckable(true);
        actionTex = new QAction(CCNotePad);
        actionTex->setObjectName(QString::fromUtf8("actionTex"));
        actionTex->setCheckable(true);
        actionFortran = new QAction(CCNotePad);
        actionFortran->setObjectName(QString::fromUtf8("actionFortran"));
        actionFortran->setCheckable(true);
        actionShell = new QAction(CCNotePad);
        actionShell->setObjectName(QString::fromUtf8("actionShell"));
        actionShell->setCheckable(true);
        actionActionScript = new QAction(CCNotePad);
        actionActionScript->setObjectName(QString::fromUtf8("actionActionScript"));
        actionActionScript->setCheckable(true);
        actionNSIS = new QAction(CCNotePad);
        actionNSIS->setObjectName(QString::fromUtf8("actionNSIS"));
        actionNSIS->setCheckable(true);
        actionTcl = new QAction(CCNotePad);
        actionTcl->setObjectName(QString::fromUtf8("actionTcl"));
        actionTcl->setCheckable(true);
        actionLisp = new QAction(CCNotePad);
        actionLisp->setObjectName(QString::fromUtf8("actionLisp"));
        actionLisp->setCheckable(true);
        actionScheme = new QAction(CCNotePad);
        actionScheme->setObjectName(QString::fromUtf8("actionScheme"));
        actionScheme->setCheckable(true);
        actionAssembly = new QAction(CCNotePad);
        actionAssembly->setObjectName(QString::fromUtf8("actionAssembly"));
        actionAssembly->setCheckable(true);
        actionD = new QAction(CCNotePad);
        actionD->setObjectName(QString::fromUtf8("actionD"));
        actionDiff = new QAction(CCNotePad);
        actionDiff->setObjectName(QString::fromUtf8("actionDiff"));
        actionDiff->setCheckable(true);
        actionProperties_file = new QAction(CCNotePad);
        actionProperties_file->setObjectName(QString::fromUtf8("actionProperties_file"));
        actionProperties_file->setCheckable(true);
        actionPostScript = new QAction(CCNotePad);
        actionPostScript->setObjectName(QString::fromUtf8("actionPostScript"));
        actionPostScript->setCheckable(true);
        actionRuby = new QAction(CCNotePad);
        actionRuby->setObjectName(QString::fromUtf8("actionRuby"));
        actionRuby->setCheckable(true);
        actionSmalltalk = new QAction(CCNotePad);
        actionSmalltalk->setObjectName(QString::fromUtf8("actionSmalltalk"));
        actionSmalltalk->setCheckable(true);
        actionVHDL = new QAction(CCNotePad);
        actionVHDL->setObjectName(QString::fromUtf8("actionVHDL"));
        actionVHDL->setCheckable(true);
        actionAutoIt = new QAction(CCNotePad);
        actionAutoIt->setObjectName(QString::fromUtf8("actionAutoIt"));
        actionAutoIt->setCheckable(true);
        actionCMake = new QAction(CCNotePad);
        actionCMake->setObjectName(QString::fromUtf8("actionCMake"));
        actionCMake->setCheckable(true);
        actionPowerShell = new QAction(CCNotePad);
        actionPowerShell->setObjectName(QString::fromUtf8("actionPowerShell"));
        actionPowerShell->setCheckable(true);
        actionJsp = new QAction(CCNotePad);
        actionJsp->setObjectName(QString::fromUtf8("actionJsp"));
        actionJsp->setCheckable(true);
        actionCoffeeScript = new QAction(CCNotePad);
        actionCoffeeScript->setObjectName(QString::fromUtf8("actionCoffeeScript"));
        actionCoffeeScript->setCheckable(true);
        actionBaanC = new QAction(CCNotePad);
        actionBaanC->setObjectName(QString::fromUtf8("actionBaanC"));
        actionBaanC->setCheckable(true);
        actionS_Record = new QAction(CCNotePad);
        actionS_Record->setObjectName(QString::fromUtf8("actionS_Record"));
        actionS_Record->setCheckable(true);
        actionTypeScript = new QAction(CCNotePad);
        actionTypeScript->setObjectName(QString::fromUtf8("actionTypeScript"));
        actionTypeScript->setCheckable(true);
        actionVisual_Prolog = new QAction(CCNotePad);
        actionVisual_Prolog->setObjectName(QString::fromUtf8("actionVisual_Prolog"));
        actionVisual_Prolog->setCheckable(true);
        actionTxt2tags = new QAction(CCNotePad);
        actionTxt2tags->setObjectName(QString::fromUtf8("actionTxt2tags"));
        actionTxt2tags->setCheckable(true);
        actionRust = new QAction(CCNotePad);
        actionRust->setObjectName(QString::fromUtf8("actionRust"));
        actionRust->setCheckable(true);
        actionRegistry = new QAction(CCNotePad);
        actionRegistry->setObjectName(QString::fromUtf8("actionRegistry"));
        actionRegistry->setCheckable(true);
        actionREBOL = new QAction(CCNotePad);
        actionREBOL->setObjectName(QString::fromUtf8("actionREBOL"));
        actionREBOL->setCheckable(true);
        actionOScript = new QAction(CCNotePad);
        actionOScript->setObjectName(QString::fromUtf8("actionOScript"));
        actionOScript->setCheckable(true);
        actionNncrontab = new QAction(CCNotePad);
        actionNncrontab->setObjectName(QString::fromUtf8("actionNncrontab"));
        actionNncrontab->setCheckable(true);
        actionNim = new QAction(CCNotePad);
        actionNim->setObjectName(QString::fromUtf8("actionNim"));
        actionNim->setCheckable(true);
        actionMMIXAL = new QAction(CCNotePad);
        actionMMIXAL->setObjectName(QString::fromUtf8("actionMMIXAL"));
        actionMMIXAL->setCheckable(true);
        actionLaTex = new QAction(CCNotePad);
        actionLaTex->setObjectName(QString::fromUtf8("actionLaTex"));
        actionLaTex->setCheckable(true);
        actionForth = new QAction(CCNotePad);
        actionForth->setObjectName(QString::fromUtf8("actionForth"));
        actionForth->setCheckable(true);
        actionESCRIPT = new QAction(CCNotePad);
        actionESCRIPT->setObjectName(QString::fromUtf8("actionESCRIPT"));
        actionESCRIPT->setCheckable(true);
        actionErlang = new QAction(CCNotePad);
        actionErlang->setObjectName(QString::fromUtf8("actionErlang"));
        actionErlang->setCheckable(true);
        actionCsound = new QAction(CCNotePad);
        actionCsound->setObjectName(QString::fromUtf8("actionCsound"));
        actionCsound->setCheckable(true);
        actionFreeBasic = new QAction(CCNotePad);
        actionFreeBasic->setObjectName(QString::fromUtf8("actionFreeBasic"));
        actionFreeBasic->setCheckable(true);
        actionBlitzBasic = new QAction(CCNotePad);
        actionBlitzBasic->setObjectName(QString::fromUtf8("actionBlitzBasic"));
        actionBlitzBasic->setCheckable(true);
        actionPureBasic = new QAction(CCNotePad);
        actionPureBasic->setObjectName(QString::fromUtf8("actionPureBasic"));
        actionPureBasic->setCheckable(true);
        actionAviSynth = new QAction(CCNotePad);
        actionAviSynth->setObjectName(QString::fromUtf8("actionAviSynth"));
        actionAviSynth->setCheckable(true);
        actionASN1 = new QAction(CCNotePad);
        actionASN1->setObjectName(QString::fromUtf8("actionASN1"));
        actionASN1->setCheckable(true);
        actionSwift = new QAction(CCNotePad);
        actionSwift->setObjectName(QString::fromUtf8("actionSwift"));
        actionSwift->setCheckable(true);
        actionIntel_HEX = new QAction(CCNotePad);
        actionIntel_HEX->setObjectName(QString::fromUtf8("actionIntel_HEX"));
        actionIntel_HEX->setCheckable(true);
        actionFortran77 = new QAction(CCNotePad);
        actionFortran77->setObjectName(QString::fromUtf8("actionFortran77"));
        actionFortran77->setCheckable(true);
        actionEdifact = new QAction(CCNotePad);
        actionEdifact->setObjectName(QString::fromUtf8("actionEdifact"));
        actionEdifact->setCheckable(true);
        actionMarkDown = new QAction(CCNotePad);
        actionMarkDown->setObjectName(QString::fromUtf8("actionMarkDown"));
        actionMarkDown_2 = new QAction(CCNotePad);
        actionMarkDown_2->setObjectName(QString::fromUtf8("actionMarkDown_2"));
        actionMarkDown_2->setCheckable(true);
        actionOctave = new QAction(CCNotePad);
        actionOctave->setObjectName(QString::fromUtf8("actionOctave"));
        actionOctave->setCheckable(true);
        actionPo = new QAction(CCNotePad);
        actionPo->setObjectName(QString::fromUtf8("actionPo"));
        actionPo->setCheckable(true);
        actionPov = new QAction(CCNotePad);
        actionPov->setObjectName(QString::fromUtf8("actionPov"));
        actionPov->setCheckable(true);
        actionjson = new QAction(CCNotePad);
        actionjson->setObjectName(QString::fromUtf8("actionjson"));
        actionjson->setCheckable(true);
        actionD_2 = new QAction(CCNotePad);
        actionD_2->setObjectName(QString::fromUtf8("actionD_2"));
        actionD_2->setCheckable(true);
        actionAVS = new QAction(CCNotePad);
        actionAVS->setObjectName(QString::fromUtf8("actionAVS"));
        actionAVS->setCheckable(true);
        actionbash = new QAction(CCNotePad);
        actionbash->setObjectName(QString::fromUtf8("actionbash"));
        actionbash->setCheckable(true);
        actionIDL = new QAction(CCNotePad);
        actionIDL->setObjectName(QString::fromUtf8("actionIDL"));
        actionIDL->setCheckable(true);
        actionMatlab = new QAction(CCNotePad);
        actionMatlab->setObjectName(QString::fromUtf8("actionMatlab"));
        actionMatlab->setCheckable(true);
        actionSpice = new QAction(CCNotePad);
        actionSpice->setObjectName(QString::fromUtf8("actionSpice"));
        actionSpice->setCheckable(true);
        actionVerilog = new QAction(CCNotePad);
        actionVerilog->setObjectName(QString::fromUtf8("actionVerilog"));
        actionVerilog->setCheckable(true);
        actionTxt = new QAction(CCNotePad);
        actionTxt->setObjectName(QString::fromUtf8("actionTxt"));
        actionTxt->setCheckable(true);
        actiontest = new QAction(CCNotePad);
        actiontest->setObjectName(QString::fromUtf8("actiontest"));
        actiontest_2 = new QAction(CCNotePad);
        actiontest_2->setObjectName(QString::fromUtf8("actiontest_2"));
        actionGo = new QAction(CCNotePad);
        actionGo->setObjectName(QString::fromUtf8("actionGo"));
        actionGo->setCheckable(true);
        actionSearch_Result = new QAction(CCNotePad);
        actionSearch_Result->setObjectName(QString::fromUtf8("actionSearch_Result"));
        actionDonate = new QAction(CCNotePad);
        actionDonate->setObjectName(QString::fromUtf8("actionDonate"));
        actionDefaultStyle = new QAction(CCNotePad);
        actionDefaultStyle->setObjectName(QString::fromUtf8("actionDefaultStyle"));
        actionDefaultStyle->setCheckable(true);
        actionDefaultStyle->setChecked(true);
        actionLightBlueStyle = new QAction(CCNotePad);
        actionLightBlueStyle->setObjectName(QString::fromUtf8("actionLightBlueStyle"));
        actionLightBlueStyle->setCheckable(true);
        actionThinBlue = new QAction(CCNotePad);
        actionThinBlue->setObjectName(QString::fromUtf8("actionThinBlue"));
        actionThinBlue->setCheckable(true);
        actionRiceYellow = new QAction(CCNotePad);
        actionRiceYellow->setObjectName(QString::fromUtf8("actionRiceYellow"));
        actionRiceYellow->setCheckable(true);
        actionYellow = new QAction(CCNotePad);
        actionYellow->setObjectName(QString::fromUtf8("actionYellow"));
        actionYellow->setCheckable(true);
        actionSilver = new QAction(CCNotePad);
        actionSilver->setObjectName(QString::fromUtf8("actionSilver"));
        actionSilver->setCheckable(true);
        actionLavenderBlush = new QAction(CCNotePad);
        actionLavenderBlush->setObjectName(QString::fromUtf8("actionLavenderBlush"));
        actionLavenderBlush->setCheckable(true);
        actionMistyRose = new QAction(CCNotePad);
        actionMistyRose->setObjectName(QString::fromUtf8("actionMistyRose"));
        actionMistyRose->setCheckable(true);
        actionEnglish = new QAction(CCNotePad);
        actionEnglish->setObjectName(QString::fromUtf8("actionEnglish"));
        actionEnglish->setCheckable(true);
        actionChinese = new QAction(CCNotePad);
        actionChinese->setObjectName(QString::fromUtf8("actionChinese"));
        actionChinese->setCheckable(true);
        actionRegister = new QAction(CCNotePad);
        actionRegister->setObjectName(QString::fromUtf8("actionRegister"));
        actionLanguage_Format = new QAction(CCNotePad);
        actionLanguage_Format->setObjectName(QString::fromUtf8("actionLanguage_Format"));
        actionOpen_In_Text = new QAction(CCNotePad);
        actionOpen_In_Text->setObjectName(QString::fromUtf8("actionOpen_In_Text"));
        actionOpen_In_Bin = new QAction(CCNotePad);
        actionOpen_In_Bin->setObjectName(QString::fromUtf8("actionOpen_In_Bin"));
        actionRemove_leading_blank = new QAction(CCNotePad);
        actionRemove_leading_blank->setObjectName(QString::fromUtf8("actionRemove_leading_blank"));
        actionRemove_eding_blank = new QAction(CCNotePad);
        actionRemove_eding_blank->setObjectName(QString::fromUtf8("actionRemove_eding_blank"));
        actionRemove_Head_End_Blank = new QAction(CCNotePad);
        actionRemove_Head_End_Blank->setObjectName(QString::fromUtf8("actionRemove_Head_End_Blank"));
        actionColumn_Block_Editing = new QAction(CCNotePad);
        actionColumn_Block_Editing->setObjectName(QString::fromUtf8("actionColumn_Block_Editing"));
        actionWrap = new QAction(CCNotePad);
        actionWrap->setObjectName(QString::fromUtf8("actionWrap"));
        actionWrap->setCheckable(true);
        actionDefine_Language = new QAction(CCNotePad);
        actionDefine_Language->setObjectName(QString::fromUtf8("actionDefine_Language"));
        actionUPPERCASE = new QAction(CCNotePad);
        actionUPPERCASE->setObjectName(QString::fromUtf8("actionUPPERCASE"));
        actionlowercase = new QAction(CCNotePad);
        actionlowercase->setObjectName(QString::fromUtf8("actionlowercase"));
        actionProper_Case = new QAction(CCNotePad);
        actionProper_Case->setObjectName(QString::fromUtf8("actionProper_Case"));
        actionProper_Case_blend = new QAction(CCNotePad);
        actionProper_Case_blend->setObjectName(QString::fromUtf8("actionProper_Case_blend"));
        actionSentence_case = new QAction(CCNotePad);
        actionSentence_case->setObjectName(QString::fromUtf8("actionSentence_case"));
        actionSentence_case_blend = new QAction(CCNotePad);
        actionSentence_case_blend->setObjectName(QString::fromUtf8("actionSentence_case_blend"));
        actionInvertCase = new QAction(CCNotePad);
        actionInvertCase->setObjectName(QString::fromUtf8("actionInvertCase"));
        actionRandomCase = new QAction(CCNotePad);
        actionRandomCase->setObjectName(QString::fromUtf8("actionRandomCase"));
        actionRemove_Empty_Lines = new QAction(CCNotePad);
        actionRemove_Empty_Lines->setObjectName(QString::fromUtf8("actionRemove_Empty_Lines"));
        actionRemove_Empty_Lines_Cbc = new QAction(CCNotePad);
        actionRemove_Empty_Lines_Cbc->setObjectName(QString::fromUtf8("actionRemove_Empty_Lines_Cbc"));
        actionUserDefine = new QAction(CCNotePad);
        actionUserDefine->setObjectName(QString::fromUtf8("actionUserDefine"));
        actionUserDefine->setCheckable(true);
        actionColumn_Edit_Mode = new QAction(CCNotePad);
        actionColumn_Edit_Mode->setObjectName(QString::fromUtf8("actionColumn_Edit_Mode"));
        actionTAB_to_Space = new QAction(CCNotePad);
        actionTAB_to_Space->setObjectName(QString::fromUtf8("actionTAB_to_Space"));
        actionSpace_to_TAB_All = new QAction(CCNotePad);
        actionSpace_to_TAB_All->setObjectName(QString::fromUtf8("actionSpace_to_TAB_All"));
        actionSpace_to_TAB_Leading = new QAction(CCNotePad);
        actionSpace_to_TAB_Leading->setObjectName(QString::fromUtf8("actionSpace_to_TAB_Leading"));
        actionDuplicate_Current_Line = new QAction(CCNotePad);
        actionDuplicate_Current_Line->setObjectName(QString::fromUtf8("actionDuplicate_Current_Line"));
        actionRemove_Duplicate_Lines = new QAction(CCNotePad);
        actionRemove_Duplicate_Lines->setObjectName(QString::fromUtf8("actionRemove_Duplicate_Lines"));
        actionRemove_Consecutive_Duplicate_Lines = new QAction(CCNotePad);
        actionRemove_Consecutive_Duplicate_Lines->setObjectName(QString::fromUtf8("actionRemove_Consecutive_Duplicate_Lines"));
        actionSplit_Lines = new QAction(CCNotePad);
        actionSplit_Lines->setObjectName(QString::fromUtf8("actionSplit_Lines"));
        actionJoin_Lines = new QAction(CCNotePad);
        actionJoin_Lines->setObjectName(QString::fromUtf8("actionJoin_Lines"));
        actionMove_Up_Current_Line = new QAction(CCNotePad);
        actionMove_Up_Current_Line->setObjectName(QString::fromUtf8("actionMove_Up_Current_Line"));
        actionMove_Down_Current_Line = new QAction(CCNotePad);
        actionMove_Down_Current_Line->setObjectName(QString::fromUtf8("actionMove_Down_Current_Line"));
        actionInsert_Blank_Line_Above_Current = new QAction(CCNotePad);
        actionInsert_Blank_Line_Above_Current->setObjectName(QString::fromUtf8("actionInsert_Blank_Line_Above_Current"));
        actionInsert_Blank_Line_Below_Current = new QAction(CCNotePad);
        actionInsert_Blank_Line_Below_Current->setObjectName(QString::fromUtf8("actionInsert_Blank_Line_Below_Current"));
        actionReverse_Line_Order = new QAction(CCNotePad);
        actionReverse_Line_Order->setObjectName(QString::fromUtf8("actionReverse_Line_Order"));
        actionRandomize_Line_Order = new QAction(CCNotePad);
        actionRandomize_Line_Order->setObjectName(QString::fromUtf8("actionRandomize_Line_Order"));
        actionSort_Lines_Lexicographically_Ascending = new QAction(CCNotePad);
        actionSort_Lines_Lexicographically_Ascending->setObjectName(QString::fromUtf8("actionSort_Lines_Lexicographically_Ascending"));
        actionSort_Lines_Lex_Ascending_Ignoring_Case = new QAction(CCNotePad);
        actionSort_Lines_Lex_Ascending_Ignoring_Case->setObjectName(QString::fromUtf8("actionSort_Lines_Lex_Ascending_Ignoring_Case"));
        actionSort_Lines_As_Integers_Ascending = new QAction(CCNotePad);
        actionSort_Lines_As_Integers_Ascending->setObjectName(QString::fromUtf8("actionSort_Lines_As_Integers_Ascending"));
        actionSort_Lines_As_Decimals_Comma_Ascending = new QAction(CCNotePad);
        actionSort_Lines_As_Decimals_Comma_Ascending->setObjectName(QString::fromUtf8("actionSort_Lines_As_Decimals_Comma_Ascending"));
        actionSort_Lines_As_Decimals_Dot_Ascending = new QAction(CCNotePad);
        actionSort_Lines_As_Decimals_Dot_Ascending->setObjectName(QString::fromUtf8("actionSort_Lines_As_Decimals_Dot_Ascending"));
        actionSort_Lines_Lexicographically_Descending = new QAction(CCNotePad);
        actionSort_Lines_Lexicographically_Descending->setObjectName(QString::fromUtf8("actionSort_Lines_Lexicographically_Descending"));
        actionSort_Lines_Lex_Descending_Ignoring_Case = new QAction(CCNotePad);
        actionSort_Lines_Lex_Descending_Ignoring_Case->setObjectName(QString::fromUtf8("actionSort_Lines_Lex_Descending_Ignoring_Case"));
        actionSort_Lines_As_Integers_Descending = new QAction(CCNotePad);
        actionSort_Lines_As_Integers_Descending->setObjectName(QString::fromUtf8("actionSort_Lines_As_Integers_Descending"));
        actionSort_Lines_As_Decimals_Comma_Descending = new QAction(CCNotePad);
        actionSort_Lines_As_Decimals_Comma_Descending->setObjectName(QString::fromUtf8("actionSort_Lines_As_Decimals_Comma_Descending"));
        actionSort_Lines_As_Decimals_Dot_Descending = new QAction(CCNotePad);
        actionSort_Lines_As_Decimals_Dot_Descending->setObjectName(QString::fromUtf8("actionSort_Lines_As_Decimals_Dot_Descending"));
        actionFind_In_Dir = new QAction(CCNotePad);
        actionFind_In_Dir->setObjectName(QString::fromUtf8("actionFind_In_Dir"));
        actionFindNext = new QAction(CCNotePad);
        actionFindNext->setObjectName(QString::fromUtf8("actionFindNext"));
        actionFindPrev = new QAction(CCNotePad);
        actionFindPrev->setObjectName(QString::fromUtf8("actionFindPrev"));
        actionRed = new QAction(CCNotePad);
        actionRed->setObjectName(QString::fromUtf8("actionRed"));
        actionYellow_2 = new QAction(CCNotePad);
        actionYellow_2->setObjectName(QString::fromUtf8("actionYellow_2"));
        actionBlue = new QAction(CCNotePad);
        actionBlue->setObjectName(QString::fromUtf8("actionBlue"));
        actionBig5 = new QAction(CCNotePad);
        actionBig5->setObjectName(QString::fromUtf8("actionBig5"));
        actionBig5->setCheckable(true);
        actionToBig5 = new QAction(CCNotePad);
        actionToBig5->setObjectName(QString::fromUtf8("actionToBig5"));
        action24 = new QAction(CCNotePad);
        action24->setObjectName(QString::fromUtf8("action24"));
        action24->setCheckable(true);
        action36 = new QAction(CCNotePad);
        action36->setObjectName(QString::fromUtf8("action36"));
        action36->setCheckable(true);
        action48 = new QAction(CCNotePad);
        action48->setObjectName(QString::fromUtf8("action48"));
        action48->setCheckable(true);
        actioninfo = new QAction(CCNotePad);
        actioninfo->setObjectName(QString::fromUtf8("actioninfo"));
        action1 = new QAction(CCNotePad);
        action1->setObjectName(QString::fromUtf8("action1"));
        actionFormat_Xml = new QAction(CCNotePad);
        actionFormat_Xml->setObjectName(QString::fromUtf8("actionFormat_Xml"));
        actionFormat_Json = new QAction(CCNotePad);
        actionFormat_Json->setObjectName(QString::fromUtf8("actionFormat_Json"));
        actionDark = new QAction(CCNotePad);
        actionDark->setObjectName(QString::fromUtf8("actionDark"));
        actionDark->setCheckable(true);
        actionVb = new QAction(CCNotePad);
        actionVb->setObjectName(QString::fromUtf8("actionVb"));
        actionVb->setCheckable(true);
        color1 = new QAction(CCNotePad);
        color1->setObjectName(QString::fromUtf8("color1"));
        color1->setCheckable(true);
        color2 = new QAction(CCNotePad);
        color2->setObjectName(QString::fromUtf8("color2"));
        color2->setCheckable(true);
        color3 = new QAction(CCNotePad);
        color3->setObjectName(QString::fromUtf8("color3"));
        color3->setCheckable(true);
        color4 = new QAction(CCNotePad);
        color4->setObjectName(QString::fromUtf8("color4"));
        color4->setCheckable(true);
        color5 = new QAction(CCNotePad);
        color5->setObjectName(QString::fromUtf8("color5"));
        color5->setCheckable(true);
        loopColor = new QAction(CCNotePad);
        loopColor->setObjectName(QString::fromUtf8("loopColor"));
        loopColor->setCheckable(true);
        actionClear_History = new QAction(CCNotePad);
        actionClear_History->setObjectName(QString::fromUtf8("actionClear_History"));
        actionFileListView = new QAction(CCNotePad);
        actionFileListView->setObjectName(QString::fromUtf8("actionFileListView"));
        actionFileListView->setCheckable(true);
        actionShow_ToolBar = new QAction(CCNotePad);
        actionShow_ToolBar->setObjectName(QString::fromUtf8("actionShow_ToolBar"));
        actionShow_ToolBar->setCheckable(true);
        actionShow_ToolBar->setChecked(true);
        actionBatch_Find = new QAction(CCNotePad);
        actionBatch_Find->setObjectName(QString::fromUtf8("actionBatch_Find"));
        actionShow_Web_Addr = new QAction(CCNotePad);
        actionShow_Web_Addr->setObjectName(QString::fromUtf8("actionShow_Web_Addr"));
        actionShow_Web_Addr->setCheckable(true);
        actionLanguage_File_Suffix = new QAction(CCNotePad);
        actionLanguage_File_Suffix->setObjectName(QString::fromUtf8("actionLanguage_File_Suffix"));
        actionShortcut_Key_Manager = new QAction(CCNotePad);
        actionShortcut_Key_Manager->setObjectName(QString::fromUtf8("actionShortcut_Key_Manager"));
        centralWidget = new QWidget(CCNotePad);
        centralWidget->setObjectName(QString::fromUtf8("centralWidget"));
        horizontalLayout = new QHBoxLayout(centralWidget);
        horizontalLayout->setSpacing(0);
        horizontalLayout->setContentsMargins(11, 11, 11, 11);
        horizontalLayout->setObjectName(QString::fromUtf8("horizontalLayout"));
        horizontalLayout->setContentsMargins(1, 0, 0, 0);
        editTabWidget = new QTabWidget(centralWidget);
        editTabWidget->setObjectName(QString::fromUtf8("editTabWidget"));
        QFont font1;
        font1.setFamily(QString::fromUtf8("Microsoft YaHei"));
        font1.setPointSize(10);
        editTabWidget->setFont(font1);
        editTabWidget->setIconSize(QSize(22, 22));
        editTabWidget->setElideMode(Qt::ElideNone);
        editTabWidget->setUsesScrollButtons(true);
        editTabWidget->setTabsClosable(true);
        editTabWidget->setMovable(true);

        horizontalLayout->addWidget(editTabWidget);

        CCNotePad->setCentralWidget(centralWidget);
        menuBar = new QMenuBar(CCNotePad);
        menuBar->setObjectName(QString::fromUtf8("menuBar"));
        menuBar->setGeometry(QRect(0, 0, 1458, 23));
        menuFile = new QMenu(menuBar);
        menuFile->setObjectName(QString::fromUtf8("menuFile"));
        menuFile->setLayoutDirection(Qt::LeftToRight);
        menuEdit = new QMenu(menuBar);
        menuEdit->setObjectName(QString::fromUtf8("menuEdit"));
        menuEdit->setLayoutDirection(Qt::LeftToRight);
        menuformat_conversion = new QMenu(menuEdit);
        menuformat_conversion->setObjectName(QString::fromUtf8("menuformat_conversion"));
        menuBlank_CharOperate = new QMenu(menuEdit);
        menuBlank_CharOperate->setObjectName(QString::fromUtf8("menuBlank_CharOperate"));
        menuConvert_Case_to = new QMenu(menuEdit);
        menuConvert_Case_to->setObjectName(QString::fromUtf8("menuConvert_Case_to"));
        menuLine_Operations = new QMenu(menuEdit);
        menuLine_Operations->setObjectName(QString::fromUtf8("menuLine_Operations"));
        menuSearch = new QMenu(menuBar);
        menuSearch->setObjectName(QString::fromUtf8("menuSearch"));
        menuBook_Mark = new QMenu(menuSearch);
        menuBook_Mark->setObjectName(QString::fromUtf8("menuBook_Mark"));
        menuMark_Color = new QMenu(menuSearch);
        menuMark_Color->setObjectName(QString::fromUtf8("menuMark_Color"));
        menuView = new QMenu(menuBar);
        menuView->setObjectName(QString::fromUtf8("menuView"));
        menudisplay_symbols = new QMenu(menuView);
        menudisplay_symbols->setObjectName(QString::fromUtf8("menudisplay_symbols"));
        menuIcon_Size = new QMenu(menuView);
        menuIcon_Size->setObjectName(QString::fromUtf8("menuIcon_Size"));
        menuCode = new QMenu(menuBar);
        menuCode->setObjectName(QString::fromUtf8("menuCode"));
        menuASNI = new QMenu(menuCode);
        menuASNI->setObjectName(QString::fromUtf8("menuASNI"));
        menuConvert_to_Other = new QMenu(menuCode);
        menuConvert_to_Other->setObjectName(QString::fromUtf8("menuConvert_to_Other"));
        menuLanguage = new QMenu(menuBar);
        menuLanguage->setObjectName(QString::fromUtf8("menuLanguage"));
        menuP = new QMenu(menuLanguage);
        menuP->setObjectName(QString::fromUtf8("menuP"));
        menuC = new QMenu(menuLanguage);
        menuC->setObjectName(QString::fromUtf8("menuC"));
        menuJ = new QMenu(menuLanguage);
        menuJ->setObjectName(QString::fromUtf8("menuJ"));
        menuR = new QMenu(menuLanguage);
        menuR->setObjectName(QString::fromUtf8("menuR"));
        menuH = new QMenu(menuLanguage);
        menuH->setObjectName(QString::fromUtf8("menuH"));
        menuM = new QMenu(menuLanguage);
        menuM->setObjectName(QString::fromUtf8("menuM"));
        menuB = new QMenu(menuLanguage);
        menuB->setObjectName(QString::fromUtf8("menuB"));
        menuI = new QMenu(menuLanguage);
        menuI->setObjectName(QString::fromUtf8("menuI"));
        menuN = new QMenu(menuLanguage);
        menuN->setObjectName(QString::fromUtf8("menuN"));
        menuA = new QMenu(menuLanguage);
        menuA->setObjectName(QString::fromUtf8("menuA"));
        menuS = new QMenu(menuLanguage);
        menuS->setObjectName(QString::fromUtf8("menuS"));
        menuV = new QMenu(menuLanguage);
        menuV->setObjectName(QString::fromUtf8("menuV"));
        menuL = new QMenu(menuLanguage);
        menuL->setObjectName(QString::fromUtf8("menuL"));
        menuT = new QMenu(menuLanguage);
        menuT->setObjectName(QString::fromUtf8("menuT"));
        menuF = new QMenu(menuLanguage);
        menuF->setObjectName(QString::fromUtf8("menuF"));
        menuD = new QMenu(menuLanguage);
        menuD->setObjectName(QString::fromUtf8("menuD"));
        menuO = new QMenu(menuLanguage);
        menuO->setObjectName(QString::fromUtf8("menuO"));
        menuE = new QMenu(menuLanguage);
        menuE->setObjectName(QString::fromUtf8("menuE"));
        menuG = new QMenu(menuLanguage);
        menuG->setObjectName(QString::fromUtf8("menuG"));
        menuSet = new QMenu(menuBar);
        menuSet->setObjectName(QString::fromUtf8("menuSet"));
        menuLanguage_2 = new QMenu(menuSet);
        menuLanguage_2->setObjectName(QString::fromUtf8("menuLanguage_2"));
        menuAbout = new QMenu(menuBar);
        menuAbout->setObjectName(QString::fromUtf8("menuAbout"));
        menuAbout_2 = new QMenu(menuBar);
        menuAbout_2->setObjectName(QString::fromUtf8("menuAbout_2"));
        menuTools = new QMenu(menuBar);
        menuTools->setObjectName(QString::fromUtf8("menuTools"));
        CCNotePad->setMenuBar(menuBar);
        mainToolBar = new QToolBar(CCNotePad);
        mainToolBar->setObjectName(QString::fromUtf8("mainToolBar"));
        mainToolBar->setMovable(false);
        mainToolBar->setFloatable(true);
        CCNotePad->addToolBar(Qt::TopToolBarArea, mainToolBar);
        statusBar = new QStatusBar(CCNotePad);
        statusBar->setObjectName(QString::fromUtf8("statusBar"));
        CCNotePad->setStatusBar(statusBar);

        menuBar->addAction(menuFile->menuAction());
        menuBar->addAction(menuEdit->menuAction());
        menuBar->addAction(menuSearch->menuAction());
        menuBar->addAction(menuView->menuAction());
        menuBar->addAction(menuCode->menuAction());
        menuBar->addAction(menuLanguage->menuAction());
        menuBar->addAction(menuSet->menuAction());
        menuBar->addAction(menuTools->menuAction());
        menuBar->addAction(menuAbout->menuAction());
        menuBar->addAction(menuAbout_2->menuAction());
        menuFile->addAction(actionNewFile);
        menuFile->addAction(actionOpenFile);
        menuFile->addAction(actionSave);
        menuFile->addAction(actionSave_as);
        menuFile->addAction(actionClose);
        menuFile->addAction(actionClose_All);
        menuFile->addSeparator();
        menuFile->addAction(actionClear_History);
        menuEdit->addAction(actionundo);
        menuEdit->addAction(actionredo);
        menuEdit->addSeparator();
        menuEdit->addAction(actioncut);
        menuEdit->addAction(actioncopy);
        menuEdit->addAction(actionpaste);
        menuEdit->addSeparator();
        menuEdit->addAction(actionselect_All);
        menuEdit->addAction(menuformat_conversion->menuAction());
        menuEdit->addSeparator();
        menuEdit->addAction(actionOpen_In_Text);
        menuEdit->addAction(actionOpen_In_Bin);
        menuEdit->addAction(menuBlank_CharOperate->menuAction());
        menuEdit->addAction(menuConvert_Case_to->menuAction());
        menuEdit->addAction(menuLine_Operations->menuAction());
        menuEdit->addSeparator();
        menuEdit->addAction(actionColumn_Edit_Mode);
        menuEdit->addAction(actionColumn_Block_Editing);
        menuformat_conversion->addAction(actionconver_windows_CR_LF);
        menuformat_conversion->addAction(actionconvert_Unix_LF);
        menuformat_conversion->addAction(actionconvert_Mac_CR);
        menuBlank_CharOperate->addAction(actionRemove_leading_blank);
        menuBlank_CharOperate->addAction(actionRemove_eding_blank);
        menuBlank_CharOperate->addAction(actionRemove_Head_End_Blank);
        menuBlank_CharOperate->addSeparator();
        menuBlank_CharOperate->addAction(actionTAB_to_Space);
        menuBlank_CharOperate->addAction(actionSpace_to_TAB_All);
        menuBlank_CharOperate->addAction(actionSpace_to_TAB_Leading);
        menuConvert_Case_to->addAction(actionUPPERCASE);
        menuConvert_Case_to->addAction(actionlowercase);
        menuConvert_Case_to->addAction(actionProper_Case);
        menuConvert_Case_to->addAction(actionProper_Case_blend);
        menuConvert_Case_to->addAction(actionSentence_case);
        menuConvert_Case_to->addAction(actionSentence_case_blend);
        menuConvert_Case_to->addAction(actionInvertCase);
        menuConvert_Case_to->addAction(actionRandomCase);
        menuLine_Operations->addAction(actionDuplicate_Current_Line);
        menuLine_Operations->addAction(actionRemove_Duplicate_Lines);
        menuLine_Operations->addAction(actionSplit_Lines);
        menuLine_Operations->addAction(actionJoin_Lines);
        menuLine_Operations->addAction(actionMove_Up_Current_Line);
        menuLine_Operations->addAction(actionMove_Down_Current_Line);
        menuLine_Operations->addAction(actionRemove_Empty_Lines);
        menuLine_Operations->addAction(actionRemove_Empty_Lines_Cbc);
        menuLine_Operations->addAction(actionInsert_Blank_Line_Above_Current);
        menuLine_Operations->addAction(actionInsert_Blank_Line_Below_Current);
        menuLine_Operations->addAction(actionReverse_Line_Order);
        menuLine_Operations->addSeparator();
        menuLine_Operations->addAction(actionSort_Lines_Lexicographically_Ascending);
        menuLine_Operations->addAction(actionSort_Lines_Lex_Ascending_Ignoring_Case);
        menuLine_Operations->addAction(actionSort_Lines_Lexicographically_Descending);
        menuLine_Operations->addAction(actionSort_Lines_Lex_Descending_Ignoring_Case);
        menuSearch->addAction(actionFind);
        menuSearch->addAction(actionFindNext);
        menuSearch->addAction(actionFindPrev);
        menuSearch->addAction(actionFind_In_Dir);
        menuSearch->addAction(actionReplace);
        menuSearch->addAction(actionGoline);
        menuSearch->addSeparator();
        menuSearch->addAction(menuBook_Mark->menuAction());
        menuSearch->addAction(menuMark_Color->menuAction());
        menuView->addAction(menudisplay_symbols->menuAction());
        menuView->addAction(actionSearch_Result);
        menuView->addAction(menuIcon_Size->menuAction());
        menuView->addAction(actionWrap);
        menuView->addAction(actionFileListView);
        menuView->addAction(actionShow_ToolBar);
        menuView->addAction(actionShow_Web_Addr);
        menudisplay_symbols->addAction(actionShowSpaces);
        menudisplay_symbols->addAction(actionshow_end_of_line);
        menudisplay_symbols->addAction(actionShowAll);
        menuIcon_Size->addAction(action24);
        menuIcon_Size->addAction(action36);
        menuIcon_Size->addAction(action48);
        menuCode->addAction(actionencode_in_GBK);
        menuCode->addAction(actionencode_in_uft8);
        menuCode->addAction(actionencode_in_UTF8_BOM);
        menuCode->addAction(actionencode_in_UCS_BE_BOM);
        menuCode->addAction(actionencode_in_UCS_2_LE_BOM);
        menuCode->addAction(menuASNI->menuAction());
        menuCode->addSeparator();
        menuCode->addAction(actionconvert_to_GBK);
        menuCode->addAction(actionconvert_to_UTF8);
        menuCode->addAction(actionconvert_to_UTF8_BOM);
        menuCode->addAction(actionconvert_to_UCS_2_BE_BOM);
        menuCode->addAction(actionconvert_to_UCS_2_LE_BOM);
        menuCode->addAction(menuConvert_to_Other->menuAction());
        menuCode->addAction(actionbatch_convert);
        menuASNI->addAction(actionBig5);
        menuConvert_to_Other->addAction(actionToBig5);
        menuLanguage->addAction(menuA->menuAction());
        menuLanguage->addAction(menuB->menuAction());
        menuLanguage->addAction(menuC->menuAction());
        menuLanguage->addAction(menuD->menuAction());
        menuLanguage->addAction(menuE->menuAction());
        menuLanguage->addAction(menuF->menuAction());
        menuLanguage->addAction(menuG->menuAction());
        menuLanguage->addAction(menuH->menuAction());
        menuLanguage->addAction(menuI->menuAction());
        menuLanguage->addAction(menuJ->menuAction());
        menuLanguage->addAction(menuL->menuAction());
        menuLanguage->addAction(menuM->menuAction());
        menuLanguage->addAction(menuN->menuAction());
        menuLanguage->addAction(menuO->menuAction());
        menuLanguage->addAction(menuP->menuAction());
        menuLanguage->addAction(menuR->menuAction());
        menuLanguage->addAction(menuS->menuAction());
        menuLanguage->addAction(menuT->menuAction());
        menuLanguage->addAction(menuV->menuAction());
        menuLanguage->addAction(actionXML);
        menuLanguage->addAction(actionYAML);
        menuLanguage->addAction(actionTxt);
        menuLanguage->addAction(actionUserDefine);
        menuP->addAction(actionPascal);
        menuP->addAction(actionPerl);
        menuP->addAction(actionPhp);
        menuP->addAction(actionPo);
        menuP->addAction(actionPostScript);
        menuP->addAction(actionPov);
        menuP->addAction(actionPowerShell);
        menuP->addAction(actionProperties_file);
        menuP->addAction(actionPureBasic);
        menuP->addAction(actionPython);
        menuC->addAction(actionC);
        menuC->addAction(actionCPP);
        menuC->addAction(actionCShape);
        menuC->addAction(actionObjective_C);
        menuC->addAction(actionCss);
        menuC->addAction(actionCMake);
        menuC->addAction(actionCoffeeScript);
        menuC->addAction(actionCsound);
        menuJ->addAction(actionJava);
        menuJ->addAction(actionJavaScript);
        menuJ->addAction(actionJsp);
        menuJ->addAction(actionjson);
        menuR->addAction(actionRC);
        menuR->addAction(actionRuby);
        menuR->addAction(actionRust);
        menuR->addAction(actionRegistry);
        menuR->addAction(actionREBOL);
        menuH->addAction(actionHTML);
        menuM->addAction(actionMakefile);
        menuM->addAction(actionMMIXAL);
        menuM->addAction(actionMarkDown_2);
        menuM->addAction(actionMatlab);
        menuB->addAction(actionBaanC);
        menuB->addAction(actionbash);
        menuB->addAction(actionBatch);
        menuB->addAction(actionBlitzBasic);
        menuI->addAction(actionIDL);
        menuI->addAction(actionini);
        menuI->addAction(actionIntel_HEX);
        menuN->addAction(actionNfo);
        menuN->addAction(actionNSIS);
        menuN->addAction(actionNncrontab);
        menuN->addAction(actionNim);
        menuA->addAction(actionASP);
        menuA->addAction(actionActionScript);
        menuA->addAction(actionAssembly);
        menuA->addAction(actionAutoIt);
        menuA->addAction(actionAviSynth);
        menuA->addAction(actionASN1);
        menuS->addAction(actionSql);
        menuS->addAction(actionShell);
        menuS->addAction(actionScheme);
        menuS->addAction(actionSmalltalk);
        menuS->addAction(actionS_Record);
        menuS->addAction(actionSwift);
        menuS->addAction(actionSpice);
        menuV->addAction(actionVb);
        menuV->addAction(actionVerilog);
        menuV->addAction(actionVirsual_Basic);
        menuV->addAction(actionVHDL);
        menuV->addAction(actionVisual_Prolog);
        menuL->addAction(actionLua);
        menuL->addAction(actionLisp);
        menuL->addAction(actionLaTex);
        menuT->addAction(actionTex);
        menuT->addAction(actionTcl);
        menuT->addAction(actionTypeScript);
        menuT->addAction(actionTxt2tags);
        menuF->addAction(actionFortran);
        menuF->addAction(actionFortran77);
        menuF->addAction(actionForth);
        menuF->addAction(actionFreeBasic);
        menuD->addAction(actionD_2);
        menuD->addAction(actionDiff);
        menuO->addAction(actionOScript);
        menuO->addAction(actionOctave);
        menuE->addAction(actionESCRIPT);
        menuE->addAction(actionErlang);
        menuE->addAction(actionEdifact);
        menuG->addAction(actionGo);
        menuSet->addAction(actionOptions);
        menuSet->addAction(menuLanguage_2->menuAction());
        menuSet->addAction(actionLanguage_Format);
        menuSet->addAction(actionDefine_Language);
        menuLanguage_2->addAction(actionChinese);
        menuLanguage_2->addAction(actionEnglish);
        menuAbout->addAction(actionDonate);
        menuAbout->addAction(actionCC_Pad);
        menuAbout_2->addAction(actioninfo);

        retranslateUi(CCNotePad);
        QObject::connect(actionNewFile, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_actionNewFile_toggle(bool)));
        QObject::connect(actionOpenFile, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_actionOpenFile_toggle(bool)));
        QObject::connect(actionSave, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_actionSaveFile_toggle(bool)));
        QObject::connect(actionSave_as, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_actionSaveAsFile_toggle(bool)));
        QObject::connect(actionClose, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_actionClose(bool)));
        QObject::connect(actionExit, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_quit(bool)));
        QObject::connect(actionClose_All, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_closeAllFile(bool)));
        QObject::connect(actionredo, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_redo()));
        QObject::connect(actionundo, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_undo()));
        QObject::connect(actioncopy, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_copy()));
        QObject::connect(actionpaste, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_paste()));
        QObject::connect(actioncut, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_cut()));
        QObject::connect(actionselect_All, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_selectAll()));
        QObject::connect(actionconvert_Mac_CR, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_convertMacLineEnd(bool)));
        QObject::connect(actionconver_windows_CR_LF, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_convertWinLineEnd(bool)));
        QObject::connect(actionconvert_Unix_LF, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_convertUnixLineEnd(bool)));
        QObject::connect(actionFind, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_find()));
        QObject::connect(actionReplace, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_replace()));
        QObject::connect(actionGoline, SIGNAL(triggered()), CCNotePad, SLOT(slot_gotoline()));
        QObject::connect(actionShowSpaces, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_show_spaces(bool)));
        QObject::connect(actionshow_end_of_line, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_show_line_end(bool)));
        QObject::connect(actionShowAll, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_allWhite(bool)));
        QObject::connect(actionencode_in_GBK, SIGNAL(triggered()), CCNotePad, SLOT(slot_load_with_gbk()));
        QObject::connect(actionconvert_to_UTF8, SIGNAL(triggered()), CCNotePad, SLOT(slot_encode_utf8()));
        QObject::connect(actionconvert_to_UTF8_BOM, SIGNAL(triggered()), CCNotePad, SLOT(slot_encode_utf8_bom()));
        QObject::connect(actionconvert_to_UCS_2_BE_BOM, SIGNAL(triggered()), CCNotePad, SLOT(slot_encode_utf16_be()));
        QObject::connect(actionencode_in_UCS_2_LE_BOM, SIGNAL(triggered()), CCNotePad, SLOT(slot_load_with_utf16_le()));
        QObject::connect(actionencode_in_UCS_BE_BOM, SIGNAL(triggered()), CCNotePad, SLOT(slot_load_with_utf16_be()));
        QObject::connect(actionencode_in_UTF8_BOM, SIGNAL(triggered()), CCNotePad, SLOT(slot_load_with_utf8_bom()));
        QObject::connect(actionencode_in_uft8, SIGNAL(triggered()), CCNotePad, SLOT(slot_load_with_utf8()));
        QObject::connect(actionconvert_to_GBK, SIGNAL(triggered()), CCNotePad, SLOT(slot_encode_gbk()));
        QObject::connect(actionconvert_to_UCS_2_LE_BOM, SIGNAL(triggered()), CCNotePad, SLOT(slot_encode_utf16_le()));
        QObject::connect(actionDir_compare, SIGNAL(triggered()), CCNotePad, SLOT(slot_compareDir()));
        QObject::connect(actionFile_compare, SIGNAL(triggered()), CCNotePad, SLOT(slot_compareFile()));
        QObject::connect(actionCC_Pad, SIGNAL(triggered()), CCNotePad, SLOT(slot_about()));
        QObject::connect(actionbatch_convert, SIGNAL(triggered()), CCNotePad, SLOT(slot_batch_convert()));
        QObject::connect(actionOptions, SIGNAL(triggered()), CCNotePad, SLOT(slot_options()));
        QObject::connect(actionSearch_Result, SIGNAL(triggered()), CCNotePad, SLOT(slot_searchResultShow()));
        QObject::connect(actionDonate, SIGNAL(triggered()), CCNotePad, SLOT(slot_donate()));
        QObject::connect(actionEnglish, SIGNAL(triggered()), CCNotePad, SLOT(slot_changeEnglish()));
        QObject::connect(actionChinese, SIGNAL(triggered()), CCNotePad, SLOT(slot_changeChinese()));
        QObject::connect(actionRegister, SIGNAL(triggered()), CCNotePad, SLOT(slot_register()));
        QObject::connect(actionLanguage_Format, SIGNAL(triggered()), CCNotePad, SLOT(slot_langFormat()));
        QObject::connect(actionOpen_In_Text, SIGNAL(triggered()), CCNotePad, SLOT(slot_reOpenTextMode()));
        QObject::connect(actionOpen_In_Bin, SIGNAL(triggered()), CCNotePad, SLOT(slot_reOpenHexMode()));
        QObject::connect(actionRemove_leading_blank, SIGNAL(triggered()), CCNotePad, SLOT(slot_removeHeadBlank()));
        QObject::connect(actionRemove_eding_blank, SIGNAL(triggered()), CCNotePad, SLOT(slot_removeEndBlank()));
        QObject::connect(actionRemove_Head_End_Blank, SIGNAL(triggered()), CCNotePad, SLOT(slot_removeHeadEndBlank()));
        QObject::connect(actionColumn_Block_Editing, SIGNAL(triggered()), CCNotePad, SLOT(slot_columnBlockEdit()));
        QObject::connect(actionDefine_Language, SIGNAL(triggered()), CCNotePad, SLOT(slot_defineLangs()));
        QObject::connect(actionUPPERCASE, SIGNAL(triggered()), CCNotePad, SLOT(slot_uppercase()));
        QObject::connect(actionlowercase, SIGNAL(triggered()), CCNotePad, SLOT(slot_lowercase()));
        QObject::connect(actionProper_Case, SIGNAL(triggered()), CCNotePad, SLOT(slot_properCase()));
        QObject::connect(actionProper_Case_blend, SIGNAL(triggered()), CCNotePad, SLOT(slot_properCaseBlend()));
        QObject::connect(actionSentence_case, SIGNAL(triggered()), CCNotePad, SLOT(slot_sentenceCase()));
        QObject::connect(actionSentence_case_blend, SIGNAL(triggered()), CCNotePad, SLOT(slot_sentenceCaseBlend()));
        QObject::connect(actionInvertCase, SIGNAL(triggered()), CCNotePad, SLOT(slot_invertCase()));
        QObject::connect(actionRandomCase, SIGNAL(triggered()), CCNotePad, SLOT(slot_randomCase()));
        QObject::connect(actionRemove_Empty_Lines, SIGNAL(triggered()), CCNotePad, SLOT(slot_removeEmptyLine()));
        QObject::connect(actionRemove_Empty_Lines_Cbc, SIGNAL(triggered()), CCNotePad, SLOT(slot_removeEmptyLineCbc()));
        QObject::connect(actionColumn_Edit_Mode, SIGNAL(triggered()), CCNotePad, SLOT(slot_column_mode()));
        QObject::connect(actionTAB_to_Space, SIGNAL(triggered()), CCNotePad, SLOT(slot_tabToSpace()));
        QObject::connect(actionSpace_to_TAB_All, SIGNAL(triggered()), CCNotePad, SLOT(slot_spaceToTabAll()));
        QObject::connect(actionSpace_to_TAB_Leading, SIGNAL(triggered()), CCNotePad, SLOT(slot_spaceToTabLeading()));
        QObject::connect(actionDuplicate_Current_Line, SIGNAL(triggered()), CCNotePad, SLOT(slot_dupCurLine()));
        QObject::connect(actionRemove_Duplicate_Lines, SIGNAL(triggered()), CCNotePad, SLOT(slot_removeDupLine()));
        QObject::connect(actionSplit_Lines, SIGNAL(triggered()), CCNotePad, SLOT(slot_splitLines()));
        QObject::connect(actionJoin_Lines, SIGNAL(triggered()), CCNotePad, SLOT(slot_joinLines()));
        QObject::connect(actionMove_Up_Current_Line, SIGNAL(triggered()), CCNotePad, SLOT(slot_moveUpCurLine()));
        QObject::connect(actionMove_Down_Current_Line, SIGNAL(triggered()), CCNotePad, SLOT(slot_moveDownCurLine()));
        QObject::connect(actionInsert_Blank_Line_Above_Current, SIGNAL(triggered()), CCNotePad, SLOT(slot_insertBlankAbvCur()));
        QObject::connect(actionInsert_Blank_Line_Below_Current, SIGNAL(triggered()), CCNotePad, SLOT(slot_insertBlankBelCur()));
        QObject::connect(actionReverse_Line_Order, SIGNAL(triggered()), CCNotePad, SLOT(slot_reverseLineOrder()));
        QObject::connect(actionSort_Lines_Lexicographically_Ascending, SIGNAL(triggered()), CCNotePad, SLOT(slot_sortLexAsc()));
        QObject::connect(actionSort_Lines_Lex_Ascending_Ignoring_Case, SIGNAL(triggered()), CCNotePad, SLOT(slot_sortLexAscIgnCase()));
        QObject::connect(actionSort_Lines_Lexicographically_Descending, SIGNAL(triggered()), CCNotePad, SLOT(slot_sortLexDesc()));
        QObject::connect(actionFind_In_Dir, SIGNAL(triggered()), CCNotePad, SLOT(slot_findInDir()));
        QObject::connect(actionFindNext, SIGNAL(triggered()), CCNotePad, SLOT(slot_findNext()));
        QObject::connect(actionFindPrev, SIGNAL(triggered()), CCNotePad, SLOT(slot_findPrev()));
        QObject::connect(actionBig5, SIGNAL(triggered()), CCNotePad, SLOT(slot_load_with_big5()));
        QObject::connect(actionToBig5, SIGNAL(triggered()), CCNotePad, SLOT(slot_encode_big5()));
        QObject::connect(actioninfo, SIGNAL(triggered()), CCNotePad, SLOT(slot_aboutNdd()));
        QObject::connect(actionClear_History, SIGNAL(triggered()), CCNotePad, SLOT(slot_clearHistoryOpenList()));
        QObject::connect(actionFileListView, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_fileListView(bool)));
        QObject::connect(actionShow_ToolBar, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_showToolBar(bool)));
        QObject::connect(actionShow_Web_Addr, SIGNAL(triggered(bool)), CCNotePad, SLOT(slot_showWebAddr(bool)));
        QObject::connect(actionLanguage_File_Suffix, SIGNAL(triggered()), CCNotePad, SLOT(slot_langFileSuffix()));
        QObject::connect(actionShortcut_Key_Manager, SIGNAL(triggered()), CCNotePad, SLOT(slot_shortcutManager()));

        editTabWidget->setCurrentIndex(-1);


        QMetaObject::connectSlotsByName(CCNotePad);
    } // setupUi

    void retranslateUi(QMainWindow *CCNotePad)
    {
        CCNotePad->setWindowTitle(QCoreApplication::translate("CCNotePad", "notepad--", nullptr));
        actionNewFile->setText(QCoreApplication::translate("CCNotePad", "New", nullptr));
#if QT_CONFIG(shortcut)
        actionNewFile->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+T", nullptr));
#endif // QT_CONFIG(shortcut)
        actionOpenFile->setText(QCoreApplication::translate("CCNotePad", "Open ...", nullptr));
#if QT_CONFIG(shortcut)
        actionOpenFile->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+O", nullptr));
#endif // QT_CONFIG(shortcut)
        actionSave->setText(QCoreApplication::translate("CCNotePad", "Save", nullptr));
#if QT_CONFIG(shortcut)
        actionSave->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+S", nullptr));
#endif // QT_CONFIG(shortcut)
        actionSave_as->setText(QCoreApplication::translate("CCNotePad", "Save As ...", nullptr));
#if QT_CONFIG(shortcut)
        actionSave_as->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Alt+S", nullptr));
#endif // QT_CONFIG(shortcut)
        actionClose->setText(QCoreApplication::translate("CCNotePad", "Close", nullptr));
#if QT_CONFIG(shortcut)
        actionClose->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+W", nullptr));
#endif // QT_CONFIG(shortcut)
        actionExit->setText(QCoreApplication::translate("CCNotePad", "Exit", nullptr));
#if QT_CONFIG(shortcut)
        actionExit->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Q", nullptr));
#endif // QT_CONFIG(shortcut)
        actionClose_All->setText(QCoreApplication::translate("CCNotePad", "Close All", nullptr));
#if QT_CONFIG(shortcut)
        actionClose_All->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Shift+W", nullptr));
#endif // QT_CONFIG(shortcut)
        actionundo->setText(QCoreApplication::translate("CCNotePad", "Undo", nullptr));
#if QT_CONFIG(shortcut)
        actionundo->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Z", nullptr));
#endif // QT_CONFIG(shortcut)
        actionredo->setText(QCoreApplication::translate("CCNotePad", "Redo", nullptr));
#if QT_CONFIG(shortcut)
        actionredo->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Y", nullptr));
#endif // QT_CONFIG(shortcut)
        actioncut->setText(QCoreApplication::translate("CCNotePad", "Cut", nullptr));
#if QT_CONFIG(shortcut)
        actioncut->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+X", nullptr));
#endif // QT_CONFIG(shortcut)
        actioncopy->setText(QCoreApplication::translate("CCNotePad", "Copy", nullptr));
#if QT_CONFIG(shortcut)
        actioncopy->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+C", nullptr));
#endif // QT_CONFIG(shortcut)
        actionpaste->setText(QCoreApplication::translate("CCNotePad", "Paste", nullptr));
#if QT_CONFIG(shortcut)
        actionpaste->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+V", nullptr));
#endif // QT_CONFIG(shortcut)
        actionselect_All->setText(QCoreApplication::translate("CCNotePad", "Select All", nullptr));
#if QT_CONFIG(shortcut)
        actionselect_All->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+A", nullptr));
#endif // QT_CONFIG(shortcut)
        actionconver_windows_CR_LF->setText(QCoreApplication::translate("CCNotePad", "Windows(CR+LF)", nullptr));
        actionconvert_Unix_LF->setText(QCoreApplication::translate("CCNotePad", "Unix(LF)", nullptr));
        actionconvert_Mac_CR->setText(QCoreApplication::translate("CCNotePad", "Mac(CR)", nullptr));
        actionFind->setText(QCoreApplication::translate("CCNotePad", "Find", nullptr));
#if QT_CONFIG(shortcut)
        actionFind->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+F", nullptr));
#endif // QT_CONFIG(shortcut)
        actionReplace->setText(QCoreApplication::translate("CCNotePad", "Replace", nullptr));
#if QT_CONFIG(shortcut)
        actionReplace->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+H", nullptr));
#endif // QT_CONFIG(shortcut)
        actionGoline->setText(QCoreApplication::translate("CCNotePad", "Go line", nullptr));
#if QT_CONFIG(shortcut)
        actionGoline->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+G", nullptr));
#endif // QT_CONFIG(shortcut)
        actionShowSpaces->setText(QCoreApplication::translate("CCNotePad", "Show spaces/tabs", nullptr));
        actionshow_end_of_line->setText(QCoreApplication::translate("CCNotePad", "Show end of line", nullptr));
        actionShowAll->setText(QCoreApplication::translate("CCNotePad", "Show all", nullptr));
        actionencode_in_GBK->setText(QCoreApplication::translate("CCNotePad", "Encode in GBK", nullptr));
        actionencode_in_uft8->setText(QCoreApplication::translate("CCNotePad", "Encode in UTF8", nullptr));
        actionencode_in_UTF8_BOM->setText(QCoreApplication::translate("CCNotePad", "Encode in UTF8-BOM", nullptr));
        actionencode_in_UCS_BE_BOM->setText(QCoreApplication::translate("CCNotePad", "Encode in UCS-2 BE BOM", nullptr));
        actionencode_in_UCS_2_LE_BOM->setText(QCoreApplication::translate("CCNotePad", "Encode in UCS-2 LE BOM", nullptr));
        actionconvert_to_GBK->setText(QCoreApplication::translate("CCNotePad", "Convert to GBK", nullptr));
        actionconvert_to_UTF8->setText(QCoreApplication::translate("CCNotePad", "Convert to UTF8", nullptr));
        actionconvert_to_UTF8_BOM->setText(QCoreApplication::translate("CCNotePad", "Convert to UTF8-BOM", nullptr));
        actionconvert_to_UCS_2_BE_BOM->setText(QCoreApplication::translate("CCNotePad", "Convert to UCS-2 BE BOM", nullptr));
        actionconvert_to_UCS_2_LE_BOM->setText(QCoreApplication::translate("CCNotePad", "Convert to UCS-2 LE BOM", nullptr));
        actionbatch_convert->setText(QCoreApplication::translate("CCNotePad", "Batch convert", nullptr));
        actionOptions->setText(QCoreApplication::translate("CCNotePad", "Options", nullptr));
        actionCC_Pad->setText(QCoreApplication::translate("CCNotePad", "BugFix", nullptr));
        actionFile_compare->setText(QCoreApplication::translate("CCNotePad", "File compare", nullptr));
        actionDir_compare->setText(QCoreApplication::translate("CCNotePad", "Dir compare", nullptr));
        actionR->setText(QCoreApplication::translate("CCNotePad", "R", nullptr));
        actionXML->setText(QCoreApplication::translate("CCNotePad", "XML", nullptr));
        actionYAML->setText(QCoreApplication::translate("CCNotePad", "YAML", nullptr));
        actionPhp->setText(QCoreApplication::translate("CCNotePad", "Php", nullptr));
        actionC->setText(QCoreApplication::translate("CCNotePad", "C", nullptr));
        actionCPP->setText(QCoreApplication::translate("CCNotePad", "C++", nullptr));
        actionCShape->setText(QCoreApplication::translate("CCNotePad", "C#", nullptr));
        actionObjective_C->setText(QCoreApplication::translate("CCNotePad", "Objective C", nullptr));
        actionJava->setText(QCoreApplication::translate("CCNotePad", "Java", nullptr));
        actionRC->setText(QCoreApplication::translate("CCNotePad", "RC", nullptr));
        actionHTML->setText(QCoreApplication::translate("CCNotePad", "HTML", nullptr));
        actionMakefile->setText(QCoreApplication::translate("CCNotePad", "Makefile", nullptr));
        actionPascal->setText(QCoreApplication::translate("CCNotePad", "Pascal", nullptr));
        actionBatch->setText(QCoreApplication::translate("CCNotePad", "Batch", nullptr));
        actionini->setText(QCoreApplication::translate("CCNotePad", "ini", nullptr));
        actionNfo->setText(QCoreApplication::translate("CCNotePad", "Nfo", nullptr));
        actionASP->setText(QCoreApplication::translate("CCNotePad", "Asp", nullptr));
        actionSql->setText(QCoreApplication::translate("CCNotePad", "Sql", nullptr));
        actionVirsual_Basic->setText(QCoreApplication::translate("CCNotePad", "Virsual Basic", nullptr));
        actionJavaScript->setText(QCoreApplication::translate("CCNotePad", "JavaScript", nullptr));
        actionCss->setText(QCoreApplication::translate("CCNotePad", "Css", nullptr));
        actionPerl->setText(QCoreApplication::translate("CCNotePad", "Perl", nullptr));
        actionPython->setText(QCoreApplication::translate("CCNotePad", "Python", nullptr));
        actionLua->setText(QCoreApplication::translate("CCNotePad", "Lua", nullptr));
        actionTex->setText(QCoreApplication::translate("CCNotePad", "Tex", nullptr));
        actionFortran->setText(QCoreApplication::translate("CCNotePad", "Fortran", nullptr));
        actionShell->setText(QCoreApplication::translate("CCNotePad", "Shell", nullptr));
        actionActionScript->setText(QCoreApplication::translate("CCNotePad", "ActionScript", nullptr));
        actionNSIS->setText(QCoreApplication::translate("CCNotePad", "NSIS", nullptr));
        actionTcl->setText(QCoreApplication::translate("CCNotePad", "Tcl", nullptr));
        actionLisp->setText(QCoreApplication::translate("CCNotePad", "Lisp", nullptr));
        actionScheme->setText(QCoreApplication::translate("CCNotePad", "Scheme", nullptr));
        actionAssembly->setText(QCoreApplication::translate("CCNotePad", "Assembly", nullptr));
        actionD->setText(QCoreApplication::translate("CCNotePad", "D", nullptr));
        actionDiff->setText(QCoreApplication::translate("CCNotePad", "Diff", nullptr));
        actionProperties_file->setText(QCoreApplication::translate("CCNotePad", "Properties file", nullptr));
        actionPostScript->setText(QCoreApplication::translate("CCNotePad", "PostScript", nullptr));
        actionRuby->setText(QCoreApplication::translate("CCNotePad", "Ruby", nullptr));
        actionSmalltalk->setText(QCoreApplication::translate("CCNotePad", "Smalltalk", nullptr));
        actionVHDL->setText(QCoreApplication::translate("CCNotePad", "VHDL", nullptr));
        actionAutoIt->setText(QCoreApplication::translate("CCNotePad", "AutoIt", nullptr));
        actionCMake->setText(QCoreApplication::translate("CCNotePad", "CMake", nullptr));
        actionPowerShell->setText(QCoreApplication::translate("CCNotePad", "PowerShell", nullptr));
        actionJsp->setText(QCoreApplication::translate("CCNotePad", "Jsp", nullptr));
        actionCoffeeScript->setText(QCoreApplication::translate("CCNotePad", "CoffeeScript", nullptr));
        actionBaanC->setText(QCoreApplication::translate("CCNotePad", "BaanC", nullptr));
        actionS_Record->setText(QCoreApplication::translate("CCNotePad", "S-Record", nullptr));
        actionTypeScript->setText(QCoreApplication::translate("CCNotePad", "TypeScript", nullptr));
        actionVisual_Prolog->setText(QCoreApplication::translate("CCNotePad", "Visual Prolog", nullptr));
        actionTxt2tags->setText(QCoreApplication::translate("CCNotePad", "Txt2tags", nullptr));
        actionRust->setText(QCoreApplication::translate("CCNotePad", "Rust", nullptr));
        actionRegistry->setText(QCoreApplication::translate("CCNotePad", "Registry", nullptr));
        actionREBOL->setText(QCoreApplication::translate("CCNotePad", "REBOL", nullptr));
        actionOScript->setText(QCoreApplication::translate("CCNotePad", "OScript", nullptr));
        actionNncrontab->setText(QCoreApplication::translate("CCNotePad", "Nncrontab", nullptr));
        actionNim->setText(QCoreApplication::translate("CCNotePad", "Nim", nullptr));
        actionMMIXAL->setText(QCoreApplication::translate("CCNotePad", "MMIXAL", nullptr));
        actionLaTex->setText(QCoreApplication::translate("CCNotePad", "LaTex", nullptr));
        actionForth->setText(QCoreApplication::translate("CCNotePad", "Forth", nullptr));
        actionESCRIPT->setText(QCoreApplication::translate("CCNotePad", "ESCRIPT", nullptr));
        actionErlang->setText(QCoreApplication::translate("CCNotePad", "Erlang", nullptr));
        actionCsound->setText(QCoreApplication::translate("CCNotePad", "Csound", nullptr));
        actionFreeBasic->setText(QCoreApplication::translate("CCNotePad", "FreeBasic", nullptr));
        actionBlitzBasic->setText(QCoreApplication::translate("CCNotePad", "BlitzBasic", nullptr));
        actionPureBasic->setText(QCoreApplication::translate("CCNotePad", "PureBasic", nullptr));
        actionAviSynth->setText(QCoreApplication::translate("CCNotePad", "AviSynth", nullptr));
        actionASN1->setText(QCoreApplication::translate("CCNotePad", "ASN.1", nullptr));
        actionSwift->setText(QCoreApplication::translate("CCNotePad", "Swift", nullptr));
        actionIntel_HEX->setText(QCoreApplication::translate("CCNotePad", "Intel HEX", nullptr));
        actionFortran77->setText(QCoreApplication::translate("CCNotePad", "Fortran77", nullptr));
        actionEdifact->setText(QCoreApplication::translate("CCNotePad", "Edifact", nullptr));
        actionMarkDown->setText(QCoreApplication::translate("CCNotePad", "MarkDown", nullptr));
        actionMarkDown_2->setText(QCoreApplication::translate("CCNotePad", "MarkDown", nullptr));
        actionOctave->setText(QCoreApplication::translate("CCNotePad", "Octave", nullptr));
        actionPo->setText(QCoreApplication::translate("CCNotePad", "Po", nullptr));
        actionPov->setText(QCoreApplication::translate("CCNotePad", "Pov", nullptr));
        actionjson->setText(QCoreApplication::translate("CCNotePad", "json", nullptr));
        actionD_2->setText(QCoreApplication::translate("CCNotePad", "D", nullptr));
        actionAVS->setText(QCoreApplication::translate("CCNotePad", "AVS", nullptr));
        actionbash->setText(QCoreApplication::translate("CCNotePad", "Bash", nullptr));
        actionIDL->setText(QCoreApplication::translate("CCNotePad", "IDL", nullptr));
        actionMatlab->setText(QCoreApplication::translate("CCNotePad", "Matlab", nullptr));
        actionSpice->setText(QCoreApplication::translate("CCNotePad", "Spice", nullptr));
        actionVerilog->setText(QCoreApplication::translate("CCNotePad", "Verilog", nullptr));
        actionTxt->setText(QCoreApplication::translate("CCNotePad", "TXT", nullptr));
        actiontest->setText(QCoreApplication::translate("CCNotePad", "test", nullptr));
        actiontest_2->setText(QCoreApplication::translate("CCNotePad", "test", nullptr));
        actionGo->setText(QCoreApplication::translate("CCNotePad", "go", nullptr));
        actionSearch_Result->setText(QCoreApplication::translate("CCNotePad", "Search Result", nullptr));
        actionDonate->setText(QCoreApplication::translate("CCNotePad", "Donate", nullptr));
        actionDefaultStyle->setText(QCoreApplication::translate("CCNotePad", "Default", nullptr));
        actionLightBlueStyle->setText(QCoreApplication::translate("CCNotePad", "LightBlue", nullptr));
        actionThinBlue->setText(QCoreApplication::translate("CCNotePad", "ThinBlue", nullptr));
        actionRiceYellow->setText(QCoreApplication::translate("CCNotePad", "RiceYellow", nullptr));
        actionYellow->setText(QCoreApplication::translate("CCNotePad", "Yellow", nullptr));
        actionSilver->setText(QCoreApplication::translate("CCNotePad", "Silver", nullptr));
        actionLavenderBlush->setText(QCoreApplication::translate("CCNotePad", "LavenderBlush", nullptr));
        actionMistyRose->setText(QCoreApplication::translate("CCNotePad", "MistyRose", nullptr));
        actionEnglish->setText(QCoreApplication::translate("CCNotePad", "English", nullptr));
        actionChinese->setText(QCoreApplication::translate("CCNotePad", "Chinese", nullptr));
        actionRegister->setText(QCoreApplication::translate("CCNotePad", "Register", nullptr));
        actionLanguage_Format->setText(QCoreApplication::translate("CCNotePad", "Theme Style", nullptr));
        actionOpen_In_Text->setText(QCoreApplication::translate("CCNotePad", "Open In Text", nullptr));
        actionOpen_In_Bin->setText(QCoreApplication::translate("CCNotePad", "Open In Bin", nullptr));
        actionRemove_leading_blank->setText(QCoreApplication::translate("CCNotePad", "Remove Head Blank", nullptr));
        actionRemove_eding_blank->setText(QCoreApplication::translate("CCNotePad", "Remove  End Blank", nullptr));
        actionRemove_Head_End_Blank->setText(QCoreApplication::translate("CCNotePad", "Remove Head End Blank", nullptr));
        actionColumn_Block_Editing->setText(QCoreApplication::translate("CCNotePad", "Column Block Editing", nullptr));
        actionWrap->setText(QCoreApplication::translate("CCNotePad", "Wrap", nullptr));
        actionDefine_Language->setText(QCoreApplication::translate("CCNotePad", "Define Language", nullptr));
        actionUPPERCASE->setText(QCoreApplication::translate("CCNotePad", "UPPERCASE", nullptr));
        actionlowercase->setText(QCoreApplication::translate("CCNotePad", "lowercase", nullptr));
        actionProper_Case->setText(QCoreApplication::translate("CCNotePad", "Proper Case", nullptr));
        actionProper_Case_blend->setText(QCoreApplication::translate("CCNotePad", "Proper Case (blend)", nullptr));
        actionSentence_case->setText(QCoreApplication::translate("CCNotePad", "Sentence case", nullptr));
        actionSentence_case_blend->setText(QCoreApplication::translate("CCNotePad", "Sentence case (blend)", nullptr));
        actionInvertCase->setText(QCoreApplication::translate("CCNotePad", "Invert Case", nullptr));
        actionRandomCase->setText(QCoreApplication::translate("CCNotePad", "Random Case", nullptr));
        actionRemove_Empty_Lines->setText(QCoreApplication::translate("CCNotePad", "Remove Empty Lines", nullptr));
        actionRemove_Empty_Lines_Cbc->setText(QCoreApplication::translate("CCNotePad", "Remove Empty Lines (Containing Blank characters)", nullptr));
        actionUserDefine->setText(QCoreApplication::translate("CCNotePad", "UserDefine", nullptr));
        actionColumn_Edit_Mode->setText(QCoreApplication::translate("CCNotePad", "Column Block Mode", nullptr));
        actionTAB_to_Space->setText(QCoreApplication::translate("CCNotePad", "TAB to Space", nullptr));
        actionSpace_to_TAB_All->setText(QCoreApplication::translate("CCNotePad", "Space to TAB (All)", nullptr));
        actionSpace_to_TAB_Leading->setText(QCoreApplication::translate("CCNotePad", "Space to TAB (Leading)", nullptr));
        actionDuplicate_Current_Line->setText(QCoreApplication::translate("CCNotePad", "Duplicate Current Line", nullptr));
#if QT_CONFIG(shortcut)
        actionDuplicate_Current_Line->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+D", nullptr));
#endif // QT_CONFIG(shortcut)
        actionRemove_Duplicate_Lines->setText(QCoreApplication::translate("CCNotePad", "Remove Duplicate Lines", nullptr));
        actionRemove_Consecutive_Duplicate_Lines->setText(QCoreApplication::translate("CCNotePad", "Remove Consecutive Duplicate Lines", nullptr));
        actionSplit_Lines->setText(QCoreApplication::translate("CCNotePad", "Split Lines", nullptr));
        actionJoin_Lines->setText(QCoreApplication::translate("CCNotePad", "Join Lines", nullptr));
        actionMove_Up_Current_Line->setText(QCoreApplication::translate("CCNotePad", "Move Up Current Line", nullptr));
#if QT_CONFIG(shortcut)
        actionMove_Up_Current_Line->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Shift+Up", nullptr));
#endif // QT_CONFIG(shortcut)
        actionMove_Down_Current_Line->setText(QCoreApplication::translate("CCNotePad", "Move Down Current Line", nullptr));
#if QT_CONFIG(shortcut)
        actionMove_Down_Current_Line->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Shift+Down", nullptr));
#endif // QT_CONFIG(shortcut)
        actionInsert_Blank_Line_Above_Current->setText(QCoreApplication::translate("CCNotePad", "Insert Blank Line Above Current", nullptr));
#if QT_CONFIG(shortcut)
        actionInsert_Blank_Line_Above_Current->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Alt+Return", nullptr));
#endif // QT_CONFIG(shortcut)
        actionInsert_Blank_Line_Below_Current->setText(QCoreApplication::translate("CCNotePad", "Insert Blank Line Below Current", nullptr));
#if QT_CONFIG(shortcut)
        actionInsert_Blank_Line_Below_Current->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Alt+Shift+Return", nullptr));
#endif // QT_CONFIG(shortcut)
        actionReverse_Line_Order->setText(QCoreApplication::translate("CCNotePad", "Reverse Line Order", nullptr));
        actionRandomize_Line_Order->setText(QCoreApplication::translate("CCNotePad", "Randomize Line Order", nullptr));
        actionSort_Lines_Lexicographically_Ascending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines Lexicographically Ascending", nullptr));
        actionSort_Lines_Lex_Ascending_Ignoring_Case->setText(QCoreApplication::translate("CCNotePad", "Sort Lines Lex. Ascending Ignoring Case", nullptr));
        actionSort_Lines_As_Integers_Ascending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines As Integers Ascending", nullptr));
        actionSort_Lines_As_Decimals_Comma_Ascending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines As Decimals (Comma) Ascending", nullptr));
        actionSort_Lines_As_Decimals_Dot_Ascending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines As Decimals (Dot) Ascending", nullptr));
        actionSort_Lines_Lexicographically_Descending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines Lexicographically Descending", nullptr));
        actionSort_Lines_Lex_Descending_Ignoring_Case->setText(QCoreApplication::translate("CCNotePad", "Sort Lines Lex. Descending Ignoring Case", nullptr));
        actionSort_Lines_As_Integers_Descending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines As Integers Descending", nullptr));
        actionSort_Lines_As_Decimals_Comma_Descending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines As Decimals (Comma) Descending", nullptr));
        actionSort_Lines_As_Decimals_Dot_Descending->setText(QCoreApplication::translate("CCNotePad", "Sort Lines As Decimals (Dot) Descending", nullptr));
        actionFind_In_Dir->setText(QCoreApplication::translate("CCNotePad", "Find In Dir", nullptr));
#if QT_CONFIG(shortcut)
        actionFind_In_Dir->setShortcut(QCoreApplication::translate("CCNotePad", "Ctrl+Shift+D", nullptr));
#endif // QT_CONFIG(shortcut)
        actionFindNext->setText(QCoreApplication::translate("CCNotePad", "Find Next", nullptr));
#if QT_CONFIG(shortcut)
        actionFindNext->setShortcut(QCoreApplication::translate("CCNotePad", "F3", nullptr));
#endif // QT_CONFIG(shortcut)
        actionFindPrev->setText(QCoreApplication::translate("CCNotePad", "Find Prev", nullptr));
#if QT_CONFIG(shortcut)
        actionFindPrev->setShortcut(QCoreApplication::translate("CCNotePad", "F4", nullptr));
#endif // QT_CONFIG(shortcut)
        actionRed->setText(QCoreApplication::translate("CCNotePad", "Red", nullptr));
        actionYellow_2->setText(QCoreApplication::translate("CCNotePad", "Yellow", nullptr));
        actionBlue->setText(QCoreApplication::translate("CCNotePad", "Blue", nullptr));
        actionBig5->setText(QCoreApplication::translate("CCNotePad", "Big5", nullptr));
        actionToBig5->setText(QCoreApplication::translate("CCNotePad", "Big5", nullptr));
        action24->setText(QCoreApplication::translate("CCNotePad", "24x24", nullptr));
        action36->setText(QCoreApplication::translate("CCNotePad", "36x36", nullptr));
        action48->setText(QCoreApplication::translate("CCNotePad", "48x48", nullptr));
        actioninfo->setText(QCoreApplication::translate("CCNotePad", "AboutNdd", nullptr));
        action1->setText(QCoreApplication::translate("CCNotePad", "1", nullptr));
        actionFormat_Xml->setText(QCoreApplication::translate("CCNotePad", "Format Xml", nullptr));
        actionFormat_Json->setText(QCoreApplication::translate("CCNotePad", "Format Json", nullptr));
        actionDark->setText(QCoreApplication::translate("CCNotePad", "Dark", nullptr));
        actionVb->setText(QCoreApplication::translate("CCNotePad", "VB", nullptr));
        color1->setText(QCoreApplication::translate("CCNotePad", "1", nullptr));
        color2->setText(QCoreApplication::translate("CCNotePad", "2", nullptr));
        color3->setText(QCoreApplication::translate("CCNotePad", "3", nullptr));
        color4->setText(QCoreApplication::translate("CCNotePad", "4", nullptr));
        color5->setText(QCoreApplication::translate("CCNotePad", "5", nullptr));
        loopColor->setText(QCoreApplication::translate("CCNotePad", "loop", nullptr));
        actionClear_History->setText(QCoreApplication::translate("CCNotePad", "Clear History", nullptr));
        actionFileListView->setText(QCoreApplication::translate("CCNotePad", "FileListView", nullptr));
        actionShow_ToolBar->setText(QCoreApplication::translate("CCNotePad", "Show ToolBar", nullptr));
        actionBatch_Find->setText(QCoreApplication::translate("CCNotePad", "Batch Find", nullptr));
        actionShow_Web_Addr->setText(QCoreApplication::translate("CCNotePad", "Show Web Addr(Not recommended)", nullptr));
        actionLanguage_File_Suffix->setText(QCoreApplication::translate("CCNotePad", "Language File Suffix", nullptr));
        actionShortcut_Key_Manager->setText(QCoreApplication::translate("CCNotePad", "Shortcut Key Manager", nullptr));
        menuFile->setTitle(QCoreApplication::translate("CCNotePad", "File(&F)", nullptr));
        menuEdit->setTitle(QCoreApplication::translate("CCNotePad", "Edit(&E)", nullptr));
        menuformat_conversion->setTitle(QCoreApplication::translate("CCNotePad", "Format Conversion", nullptr));
        menuBlank_CharOperate->setTitle(QCoreApplication::translate("CCNotePad", "Blank CharOperate", nullptr));
        menuConvert_Case_to->setTitle(QCoreApplication::translate("CCNotePad", "Convert Case to", nullptr));
        menuLine_Operations->setTitle(QCoreApplication::translate("CCNotePad", "Line Operations", nullptr));
        menuSearch->setTitle(QCoreApplication::translate("CCNotePad", "Search(&S)", nullptr));
        menuBook_Mark->setTitle(QCoreApplication::translate("CCNotePad", "Book Mark", nullptr));
        menuMark_Color->setTitle(QCoreApplication::translate("CCNotePad", "Mark Color", nullptr));
        menuView->setTitle(QCoreApplication::translate("CCNotePad", "View(&V)", nullptr));
        menudisplay_symbols->setTitle(QCoreApplication::translate("CCNotePad", "Display symbols", nullptr));
        menuIcon_Size->setTitle(QCoreApplication::translate("CCNotePad", "Icon Size", nullptr));
        menuCode->setTitle(QCoreApplication::translate("CCNotePad", "Encoding(&N)", nullptr));
        menuASNI->setTitle(QCoreApplication::translate("CCNotePad", "Other", nullptr));
        menuConvert_to_Other->setTitle(QCoreApplication::translate("CCNotePad", "Convert to Other", nullptr));
        menuLanguage->setTitle(QCoreApplication::translate("CCNotePad", "Language(&L)", nullptr));
        menuP->setTitle(QCoreApplication::translate("CCNotePad", "P", nullptr));
        menuC->setTitle(QCoreApplication::translate("CCNotePad", "C", nullptr));
        menuJ->setTitle(QCoreApplication::translate("CCNotePad", "J", nullptr));
        menuR->setTitle(QCoreApplication::translate("CCNotePad", "R", nullptr));
        menuH->setTitle(QCoreApplication::translate("CCNotePad", "H", nullptr));
        menuM->setTitle(QCoreApplication::translate("CCNotePad", "M", nullptr));
        menuB->setTitle(QCoreApplication::translate("CCNotePad", "B", nullptr));
        menuI->setTitle(QCoreApplication::translate("CCNotePad", "I", nullptr));
        menuN->setTitle(QCoreApplication::translate("CCNotePad", "N", nullptr));
        menuA->setTitle(QCoreApplication::translate("CCNotePad", "A", nullptr));
        menuS->setTitle(QCoreApplication::translate("CCNotePad", "S", nullptr));
        menuV->setTitle(QCoreApplication::translate("CCNotePad", "V", nullptr));
        menuL->setTitle(QCoreApplication::translate("CCNotePad", "L", nullptr));
        menuT->setTitle(QCoreApplication::translate("CCNotePad", "T", nullptr));
        menuF->setTitle(QCoreApplication::translate("CCNotePad", "F", nullptr));
        menuD->setTitle(QCoreApplication::translate("CCNotePad", "D", nullptr));
        menuO->setTitle(QCoreApplication::translate("CCNotePad", "O", nullptr));
        menuE->setTitle(QCoreApplication::translate("CCNotePad", "E", nullptr));
        menuG->setTitle(QCoreApplication::translate("CCNotePad", "G", nullptr));
        menuSet->setTitle(QCoreApplication::translate("CCNotePad", "Set(&T)", nullptr));
        menuLanguage_2->setTitle(QCoreApplication::translate("CCNotePad", "Language", nullptr));
        menuAbout->setTitle(QCoreApplication::translate("CCNotePad", "Feedback", nullptr));
        menuAbout_2->setTitle(QCoreApplication::translate("CCNotePad", "About", nullptr));
        menuTools->setTitle(QCoreApplication::translate("CCNotePad", "Tools(&O)", nullptr));
    } // retranslateUi

};

namespace Ui {
    class CCNotePad: public Ui_CCNotePad {};
} // namespace Ui

QT_END_NAMESPACE

#endif // UI_CCNOTEPAD_H
